    "require": {
        "php": "^8.2",
        "barryvdh/laravel-ide-helper": "^3.2",
        "envatic/crud-strap": "^5.0",
        "envatic/laravel-vue-i18n-generator": "^0.1.70",
        "inertiajs/inertia-laravel": "^1.0",
        "kkomelin/laravel-translatable-string-exporter": "^1.22",
        "kornrunner/ethereum-util": "^0.1.0",
        "kornrunner/secp256k1": "^0.3.0",
        "laravel/framework": "^11.31",
        "laravel/reverb": "^1.0",
        "laravel/sanctum": "^4.0",
        "laravel/tinker": "^2.9",
        "league/flysystem-aws-s3-v3": "^3.0",
        "mailersend/laravel-driver": "^2.7",
        "resend/resend-php": "^0.14.0",
        "simplito/elliptic-php": "^1.0",
        "sopamo/laravel-filepond": "^1.4",
        "symfony/http-client": "^7.2",
        "symfony/mailgun-mailer": "^7.1",
        "symfony/postmark-mailer": "^7.1",
        "tightenco/ziggy": "^2.0"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "laravel/breeze": "^2.2",
        "laravel/pail": "^1.1",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.26",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.1",
        "phpunit/phpunit": "^11.0.1"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ],
        "dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74\" \"php artisan serve\" \"php artisan queue:listen --tries=1\" \"php artisan pail --timeout=0\" \"npm run dev\" --names=server,queue,logs,vite"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}


================================================
File: docker-compose.yml
================================================
services:
    laravel.test:
        build:
            context: './docker/8.4'
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: 'sail-8.4/app'
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '${APP_PORT:-80}:80'
            - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'
            - "${REVERB_SERVER_PORT:-8080}:8080"
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - mysql
            - redis
            - meilisearch
            - mailpit
            - selenium
    mysql:
        image: 'mysql/mysql-server:8.0'
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        volumes:
            - 'sail-mysql:/var/lib/mysql'
            - './docker/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - mysqladmin
                - ping
                - '-p${DB_PASSWORD}'
            retries: 3
            timeout: 5s
    redis:
        image: 'redis:alpine'
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        volumes:
            - 'sail-redis:/data'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - redis-cli
                - ping
            retries: 3
            timeout: 5s
    meilisearch:
        image: 'getmeili/meilisearch:latest'
        ports:
            - '${FORWARD_MEILISEARCH_PORT:-7700}:7700'
        environment:
            MEILI_NO_ANALYTICS: '${MEILISEARCH_NO_ANALYTICS:-false}'
        volumes:
            - 'sail-meilisearch:/meili_data'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - wget
                - '--no-verbose'
                - '--spider'
                - 'http://127.0.0.1:7700/health'
            retries: 3
            timeout: 5s
    mailpit:
        image: 'axllent/mailpit:latest'
        ports:
            - '${FORWARD_MAILPIT_PORT:-1025}:1025'
            - '${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025'
        networks:
            - sail
    selenium:
        image: selenium/standalone-chromium
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        volumes:
            - '/dev/shm:/dev/shm'
        networks:
            - sail
networks:
    sail:
        driver: bridge
volumes:
    sail-mysql:
        driver: local
    sail-redis:
        driver: local
    sail-meilisearch:
        driver: local


================================================
File: install-components.sh
================================================
#!/bin/bash

# List of components
components=(
    "accordion"
    "alert"
    "alert-dialog"
    "aspect-ratio"
    "avatar"
    "badge"
    "button"
    "calendar"
    "card"
    "checkbox"
    "collapsible"
    "combobox"
    "command"
    "context-menu"
    "dialog"
    "dropdown-menu"
    "form"
    "hover-card"
    "input"
    "label"
    "menubar"
    "navigation-menu"
    "popover"
    "progress"
    "radio-group"
    "scroll-area"
    "select"
    "separator"
    "sheet"
    "skeleton"
    "slider"
    "switch"
    "table"
    "tabs"
    "textarea"
    "toast"
    "toggle"
    "tooltip"
)

# Loop through each component and install it
for component in "${components[@]}"; do
    echo "Installing $component..."
    echo yes | npx npx shadcn-vue@latest add $component
    echo "$component installed!"
done

echo "All components installed successfully!"


================================================
File: jsconfig.json
================================================
{
    "compilerOptions": {
        "baseUrl": ".",
        "paths": {
            "@/*": ["resources/js/*"],
            "ziggy-js": ["./vendor/tightenco/ziggy"]
        }
    },
    "exclude": ["node_modules", "public"]
}


================================================
File: laravel-reverb-setup.sh
================================================
#!/bin/bash

# Check if running from the Laravel project directory
if [ ! -f "./artisan" ]; then
    echo "Error: artisan file not found in current directory"
    echo "Please run this script from your Laravel project root directory"
    exit 1
fi

# Check if .env exists
if [ ! -f "./.env" ]; then
    echo "Error: .env file not found in current directory"
    echo "Please ensure your .env file exists"
    exit 1
fi

# Get absolute path of artisan
ARTISAN_PATH=$(readlink -f ./artisan)
echo "✓ Found artisan at: ${ARTISAN_PATH}"

# Function to check if command was successful
check_status() {
    if [ $? -eq 0 ]; then
        echo "✓ $1"
    else
        echo "✗ $1"
        exit 1
    fi
}

# Function to generate random string
generate_random_string() {
    local length=$1
    cat /dev/urandom | tr -dc 'a-z0-9' | fold -w $length | head -n 1
}

# Generate Reverb credentials
REVERB_APP_ID=$(shuf -i 100000-999999 -n 1)
REVERB_APP_KEY=$(generate_random_string 20)
REVERB_APP_SECRET=$(generate_random_string 20)

# Update .env file with new Reverb credentials
echo "Updating Reverb configuration in .env..."
# Backup .env file
cp .env .env.backup.$(date +%Y%m%d_%H%M%S)

# Update or add Reverb settings
if grep -q "REVERB_APP_ID" .env; then
    sed -i "s/REVERB_APP_ID=.*/REVERB_APP_ID=$REVERB_APP_ID/" .env
else
    echo "REVERB_APP_ID=$REVERB_APP_ID" >> .env
fi

if grep -q "REVERB_APP_KEY" .env; then
    sed -i "s/REVERB_APP_KEY=.*/REVERB_APP_KEY=$REVERB_APP_KEY/" .env
else
    echo "REVERB_APP_KEY=$REVERB_APP_KEY" >> .env
fi

if grep -q "REVERB_APP_SECRET" .env; then
    sed -i "s/REVERB_APP_SECRET=.*/REVERB_APP_SECRET=$REVERB_APP_SECRET/" .env
else
    echo "REVERB_APP_SECRET=$REVERB_APP_SECRET" >> .env
fi

check_status "Reverb configuration updated in .env"
echo "✓ Backup created at .env.backup.$(date +%Y%m%d_%H%M%S)"
echo "✓ New Reverb credentials:"
echo "  APP ID: $REVERB_APP_ID"
echo "  APP KEY: $REVERB_APP_KEY"
echo "  APP SECRET: $REVERB_APP_SECRET"

# Check if script is run with sudo
if [ "$EUID" -ne 0 ]; then 
    echo "Please run with sudo"
    echo "Usage: sudo ./$(basename $0)"
    exit 1
fi

# Enable required Apache modules
echo "Enabling required Apache modules..."
sudo a2enmod proxy
sudo a2enmod proxy_http
sudo a2enmod proxy_balancer
sudo a2enmod proxy_wstunnel
sudo a2enmod rewrite
sudo a2enmod lbmethod_byrequests
check_status "Apache modules enabled"

# Create Reverb proxy configuration
REVERB_CONF="/etc/apache2/conf-available/reverb-proxy.conf"
echo "Creating Reverb proxy configuration..."
cat > "$REVERB_CONF" << 'EOF'
<IfModule mod_proxy.c>
    <IfModule mod_proxy_wstunnel.c>
        RewriteEngine On
        RewriteCond %{HTTP:Upgrade} =websocket [NC]
        RewriteCond %{HTTP:Connection} upgrade$ [NC]
        RewriteRule ^/app(.*)$ ws://127.0.0.1:8080/app$1 [P,L]

        ProxyPass /app ws://127.0.0.1:8080/app
        ProxyPassReverse /app ws://127.0.0.1:8080/app
    </IfModule>

    RewriteCond %{REQUEST_URI} ^/app [NC]
    RewriteRule ^/app(.*)$ http://127.0.0.1:8080/app$1 [P,L]

    ProxyPass /app http://127.0.0.1:8080/app
    ProxyPassReverse /app http://127.0.0.1:8080/app
</IfModule>
EOF
check_status "Reverb proxy configuration created"

# Enable the configuration
sudo a2enconf reverb-proxy
check_status "Reverb proxy configuration enabled"

# Restart Apache
echo "Restarting Apache..."
sudo systemctl restart apache2
check_status "Apache restarted"

# Update package list
echo "Updating package list..."
apt-get update
check_status "Package list updated"

# Install supervisor
echo "Installing supervisor..."
apt-get install -y supervisor
check_status "Supervisor installed"

# Ensure supervisor is running
systemctl enable supervisor
systemctl start supervisor
check_status "Supervisor service started"

# Update main supervisor configuration to set minfds
cat > /etc/supervisor/supervisord.conf << EOF
[supervisord]
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/supervisor
minfds=10000

[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[include]
files = /etc/supervisor/conf.d/*.conf
EOF
check_status "Main supervisor configuration updated with minfds"

# Create Laravel Websocket Worker configuration
cat > /etc/supervisor/conf.d/laravel-reverb.conf << EOF
[program:laravel-reverb]
process_name=%(program_name)s_%(process_num)02d
command=php ${ARTISAN_PATH} reverb:start
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
user=www-data
numprocs=1
redirect_stderr=true
stdout_logfile=/var/log/supervisor/laravel-reverb.log
stopwaitsecs=3600
EOF
check_status "Websocket worker configuration created"

# Create log directory if it doesn't exist
mkdir -p /var/log/supervisor
check_status "Log directory created"

# Set proper permissions
chown -R www-data:www-data /var/log/supervisor
check_status "Log permissions set"

# Reload supervisor configuration
supervisorctl reread
supervisorctl update
check_status "Supervisor configuration reloaded"

# Start the processes
supervisorctl start laravel-reverb:*
check_status "Processes started"

# Show status
echo -e "\nCurrent supervisor status:"
supervisorctl status

echo -e "\nSetup completed successfully!"
echo "You can monitor the processes using 'supervisorctl status'"
echo "Logs are available at:"
echo "- Websocket: /var/log/supervisor/laravel-reverb.log"
echo "- Supervisor: /var/log/supervisor/supervisord.log"
echo -e "\nIMPORTANT: New Reverb credentials have been generated and saved to .env"
echo "A backup of your original .env has been created"
echo "Apache Reverb proxy configuration has been set up at: $REVERB_CONF"


================================================
File: package.json
================================================
{
    "private": true,
    "type": "module",
    "scripts": {
        "build": "vite build",
        "dev": "vite"
    },
    "devDependencies": {
        "@inertiajs/vue3": "^1.0.0",
        "@tailwindcss/forms": "^0.5.3",
        "@vitejs/plugin-vue": "^5.0.0",
        "autoprefixer": "^10.4.12",
        "axios": "^1.7.4",
        "concurrently": "^9.0.1",
        "laravel-echo": "^1.17.1",
        "laravel-vite-plugin": "^1.0",
        "postcss": "^8.4.31",
        "pusher-js": "^8.4.0-rc2",
        "tailwindcss": "^3.2.1",
        "vite": "^5.0",
        "vue": "^3.4.0"
    },
    "dependencies": {
        "@headlessui/vue": "^1.7.23",
        "@heroicons/vue": "^2.2.0",
        "@reown/appkit": "^1.6.3",
        "@reown/appkit-adapter-wagmi": "^1.6.3",
        "@tanstack/vue-query": "^5.61.5",
        "@vee-validate/zod": "^4.14.7",
        "@vue/eslint-config-standard": "^8.0.1",
        "@vueuse/components": "^12.0.0",
        "@vueuse/core": "^12.0.0",
        "@wagmi/vue": "^0.1.6",
        "@wdns/vue-code-block": "^2.3.3",
