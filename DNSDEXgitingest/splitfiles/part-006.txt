        "class-variance-authority": "^0.7.1",
        "clsx": "^2.1.1",
        "eslint": "^8.43.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-standard": "^17.1.0",
        "eslint-plugin-import": "^2.26.0",
        "eslint-plugin-node": "^11.1.0",
        "eslint-plugin-prettier": "^4.2.1",
        "eslint-plugin-promise": "^6.1.1",
        "eslint-plugin-vue": "^9.15.1",
        "filepond-plugin-file-validate-type": "^1.2.9",
        "filepond-plugin-image-preview": "^4.6.12",
        "lightweight-charts": "^4.2.1",
        "lucide-vue-next": "^0.462.0",
        "luxon": "^3.5.0",
        "mini-svg-data-uri": "^1.4.4",
        "oh-vue-icons": "^1.0.0-rc3",
        "radix-vue": "^1.9.10",
        "tailwind-merge": "^2.5.5",
        "tailwind-scrollbar": "^3.1.0",
        "tailwindcss-animate": "^1.0.7",
        "uid": "^2.0.2",
        "v-calendar": "^3.1.2",
        "vee-validate": "^4.14.7",
        "viem": "^2.21.51",
        "vue-filepond": "^7.0.4",
        "vue-i18n": "^10.0.5",
        "vue-lite-youtube-embed": "^1.2.4",
        "vue-tippy": "^6.0.0-alpha.65",
        "vue3-emoji-picker": "^1.1.8",
        "vue3-simple-icons": "^13.2.0",
        "zod": "^3.23.8"
    }
}


================================================
File: phpunit.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory>tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory>tests/Feature</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory>app</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="APP_MAINTENANCE_DRIVER" value="file"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_STORE" value="array"/>
        <env name="DB_DATABASE" value="testing"/>
        <env name="MAIL_MAILER" value="array"/>
        <env name="PULSE_ENABLED" value="false"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>


================================================
File: postcss.config.js
================================================
export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
};


================================================
File: process_queue.sh
================================================
#!/bin/bash
# Get the directory of the script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Set maximum execution time (in seconds)
TIMEOUT=290

# Start time
START_TIME=$(date +%s)

# Process a limited number of jobs
/usr/local/bin/php $DIR/artisan queue:work --stop-when-empty --max-jobs=20 --max-time=$TIMEOUT

# Log completion
echo "$(date): Queue processed" >> $DIR/storage/logs/queue.log

================================================
File: project-stack.md
================================================
## Core Technologies

-   Laravel v11.31
-   Vue.js 3.x (Composition API with `<script setup>`)
-   Inertiajs "@inertiajs/vue3": "^1.0.0",
-   Tailwind CSS 3.x (Light and Dark styles)
-   Shadcn-vue : all components have been installed at "@/Components/ui/<component>"
-   Lucide Vue Next icons
-   @heroicons/vue
-   vue3-simple-icons


================================================
File: purge-dstore.sh
================================================
#!/bin/bash

# First, find all .DS_Store files in the project, excluding ignored paths
find . -type f -name ".DS_Store" \
    ! -path "./node_modules/*" \
    ! -path "./public/build/*" \
    ! -path "./public/hot/*" \
    ! -path "./public/storage/*" \
    ! -path "./storage/*.key" \
    ! -path "./vendor/*" \
    ! -path "./.git/*" \
    -print0 | xargs -0 rm -f

# Remove from git index if they were tracked
git ls-files ".DS_Store" --ignored --exclude-standard -z | xargs -0 git rm --cached

# Add .DS_Store to gitignore if not already present
if ! grep -q ".DS_Store" .gitignore; then
    echo ".DS_Store" >> .gitignore
    echo "**/.DS_Store" >> .gitignore
fi

echo "✨ .DS_Store files have been removed and added to .gitignore"

================================================
File: queue-worker-setup-fedora.sh
================================================
#!/bin/bash

if [ ! -f "./artisan" ]; then
    echo "Error: Run from Laravel project root"
    exit 1
fi

ARTISAN_PATH=$(readlink -f ./artisan)
PROJECT_DIR=$(basename $(pwd))
SAFE_PROJECT_NAME=$(echo "$PROJECT_DIR" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')

if [ "$EUID" -ne 0 ]; then 
    echo "Run with sudo"
    exit 1
fi

# Fedora-specific package installation
dnf install -y supervisor
systemctl enable supervisord
systemctl start supervisord

# Configure supervisord
cat > /etc/supervisord.d/supervisord.conf << EOF
[supervisord]
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/supervisor
minfds=10000

[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[include]
files = /etc/supervisord.d/*.ini
EOF

# Create queue worker config
cat > "/etc/supervisord.d/laravel-queue-${SAFE_PROJECT_NAME}.ini" << EOF
[program:laravel-queue-${SAFE_PROJECT_NAME}]
process_name=%(program_name)s_%(process_num)02d
command=php ${ARTISAN_PATH} queue:work --sleep=3 --tries=3 --max-time=3600
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
user=nobody
numprocs=2
redirect_stderr=true
stdout_logfile=/var/log/supervisor/laravel-queue-${SAFE_PROJECT_NAME}.log
stopwaitsecs=3600
EOF

mkdir -p /var/log/supervisor
chown -R nobody:nobody /var/log/supervisor

supervisorctl reread
supervisorctl update
supervisorctl start "laravel-queue-${SAFE_PROJECT_NAME}:*"
supervisorctl status

================================================
File: queue-worker-setup.sh
================================================
#!/bin/bash

# Check if running from the Laravel project directory
if [ ! -f "./artisan" ]; then
    echo "Error: artisan file not found in current directory"
    echo "Please run this script from your Laravel project root directory"
    exit 1
fi

# Get absolute path of artisan and project directory
ARTISAN_PATH=$(readlink -f ./artisan)
PROJECT_DIR=$(basename $(pwd))
# Sanitize project directory name for use in filenames
SAFE_PROJECT_NAME=$(echo "$PROJECT_DIR" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')
echo "✓ Found artisan at: ${ARTISAN_PATH}"
echo "✓ Project directory: ${PROJECT_DIR}"

# Function to check if command was successful
check_status() {
    if [ $? -eq 0 ]; then
        echo "✓ $1"
    else
        echo "✗ $1"
        exit 1
    fi
}

# Check if script is run with sudo
if [ "$EUID" -ne 0 ]; then 
    echo "Please run with sudo"
    echo "Usage: sudo ./$(basename $0)"
    exit 1
fi

# Update package list
echo "Updating package list..."
apt-get update
check_status "Package list updated"

# Install supervisor
echo "Installing supervisor..."
apt-get install -y supervisor
check_status "Supervisor installed"

# Ensure supervisor is running
systemctl enable supervisor
systemctl start supervisor
check_status "Supervisor service started"

# Update main supervisor configuration to set minfds
cat > /etc/supervisor/supervisord.conf << EOF
[supervisord]
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/supervisor
minfds=10000

[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[include]
files = /etc/supervisor/conf.d/*.conf
EOF
check_status "Main supervisor configuration updated with minfds"

# Create Laravel Queue Worker configuration with unique name
cat > "/etc/supervisor/conf.d/laravel-queue-${SAFE_PROJECT_NAME}.conf" << EOF
[program:laravel-queue-${SAFE_PROJECT_NAME}]
process_name=%(program_name)s_%(process_num)02d
command=php ${ARTISAN_PATH} queue:work --sleep=3 --tries=3 --max-time=3600
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
user=www-data
numprocs=2
redirect_stderr=true
stdout_logfile=/var/log/supervisor/laravel-queue-${SAFE_PROJECT_NAME}.log
stopwaitsecs=3600
EOF
check_status "Queue worker configuration created"

# Create log directory if it doesn't exist
mkdir -p /var/log/supervisor
check_status "Log directory created"

# Set proper permissions
chown -R www-data:www-data /var/log/supervisor
check_status "Log permissions set"

# Reload supervisor configuration
supervisorctl reread
supervisorctl update
check_status "Supervisor configuration reloaded"

# Start the processes with unique name
supervisorctl start "laravel-queue-${SAFE_PROJECT_NAME}:*"
check_status "Processes started"

# Show status
echo -e "\nCurrent supervisor status:"
supervisorctl status

echo -e "\nSetup completed successfully!"
echo "You can monitor the processes using 'supervisorctl status'"
echo "Logs are available at:"
echo "- Queue Worker: /var/log/supervisor/laravel-queue-${SAFE_PROJECT_NAME}.log"
echo "- Supervisor: /var/log/supervisor/supervisord.log"

================================================
File: tailwind.config.js
================================================
import defaultTheme from 'tailwindcss/defaultTheme';

const svgToDataUri = require("mini-svg-data-uri");

/** @type {import('tailwindcss').Config} */
export default {
    darkMode: 'class',
    content: [
        './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',
        './storage/framework/views/*.php',
        './resources/views/**/*.blade.php',
        './resources/js/**/*.vue',
    ],

    theme: {
        container: {
            center: true,
            padding: "2rem",
            screens: {
                sm: '576px',
                md: '768px',
                lg: '992px',
                xl: '1200px',
                xxl: '1400px',
                "2xl": "1400px",
            },
        },
        extend: {
            maxWidth: {
                sm: `${540 / 16}rem`,
                md: `${720 / 16}rem`,
                lg: `${960 / 16}rem`,
                xl: `${1140 / 16}rem`,
                xxl: `${1320 / 16}rem`,
            },
            fontFamily: {
                sans: ['Rubik', ...defaultTheme.fontFamily.sans],
            },
            colors: {
                primary: {
                    DEFAULT: '#ffbe1a',
                    dark: '#e6aa17'  // ~10% darker for hover state
                },
                gray: {
                    '50': "#fafafa",
                    '100': "#f5f5f5",
                    '150': "#ededed",  // New intermediate shade
                    '200': "#e5e5e5",
                    '250': "#dcdcdc",  // New intermediate shade
                    '300': "#d4d4d4",
                    '350': "#bebebe",  // New intermediate shade
                    '400': "#a3a3a3",
                    '450': "#8b8b8b",  // New intermediate shade
                    '500': "#737373",
                    '550': "#636363",  // New intermediate shade
                    '600': "#525252",
                    '650': "#494949",  // New intermediate shade
                    '700': "#404040",
                    '750': "#333333",  // New intermediate shade
                    '800': "#262626",
                    '850': "#1f1f1f",  // New intermediate shade
                    '900': "#171717",
                    '925': "#101010",  // New intermediate shade
                    '950': "#0a0a0a"
                }

            },
            backgroundImage: (theme) => ({
                'multiselect-caret': `url("${svgToDataUri(
                    `<svg viewBox="0 0 320 512" fill="currentColor" xmlns="http://www.w3.org/2000/svg"><path d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"></path></svg>`,
                )}")`,
                'multiselect-spinner': `url("${svgToDataUri(
                    `<svg viewBox="0 0 512 512" fill="${theme('colors.emerald.500')}" xmlns="http://www.w3.org/2000/svg"><path d="M456.433 371.72l-27.79-16.045c-7.192-4.152-10.052-13.136-6.487-20.636 25.82-54.328 23.566-118.602-6.768-171.03-30.265-52.529-84.802-86.621-144.76-91.424C262.35 71.922 256 64.953 256 56.649V24.56c0-9.31 7.916-16.609 17.204-15.96 81.795 5.717 156.412 51.902 197.611 123.408 41.301 71.385 43.99 159.096 8.042 232.792-4.082 8.369-14.361 11.575-22.424 6.92z"></path></svg>`,
                )}")`,
                'multiselect-remove': `url("${svgToDataUri(
                    `<svg viewBox="0 0 320 512" fill="currentColor" xmlns="http://www.w3.org/2000/svg"><path d="M207.6 256l107.72-107.72c6.23-6.23 6.23-16.34 0-22.58l-25.03-25.03c-6.23-6.23-16.34-6.23-22.58 0L160 208.4 52.28 100.68c-6.23-6.23-16.34-6.23-22.58 0L4.68 125.7c-6.23 6.23-6.23 16.34 0 22.58L112.4 256 4.68 363.72c-6.23 6.23-6.23 16.34 0 22.58l25.03 25.03c6.23 6.23 16.34 6.23 22.58 0L160 303.6l107.72 107.72c6.23 6.23 16.34 6.23 22.58 0l25.03-25.03c6.23-6.23 6.23-16.34 0-22.58L207.6 256z"></path></svg>`,
                )}")`,
            }),
            keyframes: {
                "accordion-down": {
                    from: { height: 0 },
                    to: { height: "var(--radix-accordion-content-height)" },
                },
                "accordion-up": {
                    from: { height: "var(--radix-accordion-content-height)" },
                    to: { height: 0 },
                },
            },
            animation: {
                "accordion-down": "accordion-down 0.2s ease-out",
                "accordion-up": "accordion-up 0.2s ease-out",
            },
        },

    },

    plugins: [require('tailwindcss-animate'), require("tailwind-scrollbar"),],
};


================================================
File: vite.config.js
================================================
import vue from '@vitejs/plugin-vue';
import laravel from 'laravel-vite-plugin';
import { defineConfig } from 'vite';

export default defineConfig({
    plugins: [
        laravel({
            input: [
                'resources/js/app.js',
                'resources/js/install.js'
            ],
            refresh: true,
        }),
        vue({
            template: {
                transformAssetUrls: {
                    base: null,
                    includeAbsolute: false,
                },
            },
        }),
    ],
});


================================================
File: .editorconfig
================================================
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

[docker-compose.yml]
indent_size = 4


================================================
File: .env.example
================================================
APP_NAME=Memex
APP_ENV=local
APP_KEY=base64:GXc/CL3cLqH6MrkUbJ4BeYK39GniHRNOM/7TwXI5Auo=
APP_DEBUG=true
APP_DEMO=true
APP_TIMEZONE=UTC
APP_URL="http://localhost"

APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

PHP_CLI_SERVER_WORKERS=4

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=memex
DB_USERNAME=memex
DB_PASSWORD=l4L6q6LDjNogx6cc

SESSION_DRIVER=database
