
    /**
     * Execute the console command.
     */
    public function handle(CandleService $candleService)
    {
        //
        $days = $this->option('days');
        $from = Carbon::now()->subDays($days)->startOfDay();
        $to = Carbon::now();
        $this->info("Updating candles from {$from} to {$to}");
        // Get active bonding curves
        $launchpads = Launchpad::query()->whereNull('pool')->get();
        foreach ($launchpads as $launchpad) {
            $this->info("Processing launchpad: {$launchpad->name} ({$launchpad->symbol})");
            try {
                $candleService->updateCandles($launchpad, $from, $to);
                $this->info("Successfully updated candles for {$launchpad->symbol}");
            } catch (\Exception $e) {
                $this->error("Error updating candles for {$launchpad->symbol}: {$e->getMessage()}");
            }
        }

        $this->info('Candle update completed');
    }
}


================================================
File: app/Enums/LaunchpadStatus.php
================================================
<?php

namespace App\Enums;
enum LaunchpadStatus: string
{
	case PENDING = 'pending';
	case PREBOND = 'prebond';
	case BONDING = 'bonding';
	case FINALIZED = 'finalized';

}


================================================
File: app/Enums/MsgStatus.php
================================================
<?php

namespace App\Enums;
enum MsgStatus: string
{
	case ACTIVE = 'active';
	case HIDDEN = 'hidden';
	case BLOCKED = 'blocked';
	case REVIEW = 'review';

}


================================================
File: app/Enums/SettingRpc.php
================================================
<?php

namespace App\Enums;
enum SettingRpc: string
{
	case ANKR = 'ankr';
	case INFURA = 'infura';
	case BLAST = 'blast';

}


================================================
File: app/Enums/TradeType.php
================================================
<?php

namespace App\Enums;
enum TradeType: string
{
	case PREBOND = 'prebond';
	case BUY = 'buy';
	case SELL = 'sell';

}


================================================
File: app/Events/NewMessage.php
================================================
<?php

namespace App\Events;

use App\Models\Msg;
use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class NewMessage implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    public $message;

    /**
     * Create a new event instance.
     */
    public function __construct(Msg $message)
    {
        $this->message = $message;
    }

    /**
     * Get the channels the event should broadcast on.
     *
     * @return array<int, \Illuminate\Broadcasting\Channel>
     */
    public function broadcastOn(): array
    {
        return [
            new Channel('launchpad.' . $this->message->launchpad_id),
        ];
    }

    /**
     * Get the data to broadcast.
     *
     * @return array
     */
    public function broadcastWith(): array
    {
        return [
            'message' => [
                'id' => $this->message->id,
                'user_id' => $this->message->user_id,
                'uuid' => $this->message->uuid,
                'message' => $this->message->message,
                'image' => $this->message->image,
                'user' => [
                    'id' => $this->message->user->id,
                    'name' => $this->message->user->name,
                    'address' => $this->message->user->address,
                    'profile_photo_url' => $this->message->user->profile_photo_url,
                ],
                'created_at' => $this->message->created_at,
            ],
        ];
    }
}


================================================
File: app/Events/NewTradeEvent.php
================================================
<?php

namespace App\Events;

use App\Http\Resources\Trade as ResourcesTrade;
use App\Models\Trade;
use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class NewTradeEvent implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    public $trade;

    public function __construct(Trade $trade)
    {
        $this->trade = $trade;
    }

    public function broadcastOn(): array
    {
        return [
            new Channel('launchpad.' . $this->trade->launchpad_id),
            new Channel('trades'),
        ];
    }

    public function broadcastWith(): array
    {
        $launchpad = $this->trade->launchpad()->first();
        return [
            'id' => $this->trade->id,
            'launchpad_id' => $this->trade->launchpad_id,
            'txid' => $this->trade->txid,
            'qty' => $this->trade->qty,
            'usd' => $this->trade->usd,
            'amount' => $this->trade->amount,
            'address' => $this->trade->address,
            'type' => $this->trade->type,
            'price' => bcdiv($this->trade->amount, $this->trade->qty, 18),
            'usd_price' => bcdiv($this->trade->usd, $this->trade->qty, 8),
            'created_at' => $this->trade->created_at,
            'date' => now()->gt($this->trade->created_at->addDays(7))
                ? $this->trade->created_at->toDateTimeString()
                : $this->trade->created_at->diffForHumans(),
            'price' => bcdiv($this->trade->amount, $this->trade->qty, 18),
            //launchpad
            'contract' => $launchpad->contract,
            'token' => $launchpad->token,
            'name' => $launchpad->name,
            'symbol' => $launchpad->symbol,
            'description' => $launchpad->description,
            'chainId' => (int) $launchpad->chainId,
            'logo' => $launchpad->logo,
        ];
    }
}


================================================
File: app/Http/Controllers/Controller.php
================================================
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}


================================================
File: app/Http/Controllers/LaunchpadsController.php
================================================
<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\DB;
use App\Actions\Uploads;
use App\Enums\LaunchpadStatus;
use App\Http\Controllers\Controller;
use App\Http\Resources\Factory as ResourcesFactory;
use App\Http\Resources\Holder;
use App\Http\Resources\Launchpad as LaunchpadResource;
use App\Http\Resources\Msg;
use App\Http\Resources\Trade;
use App\Models\Factory;
use App\Models\Launchpad;
use App\Models\Poolstat;
use App\Models\Promo;
use App\Models\Rate;
use App\Models\Trade as ModelsTrade;
use Carbon\Carbon;
use Gate;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\File;
use Illuminate\Validation\Rules\Enum;
use Inertia\Inertia;

use function Clue\StreamFilter\fun;

class LaunchpadsController extends Controller
{
    /**
     * Display a listing of the resource.
     * @return \Illuminate\View\View
     */
    public function index(Request $request, $type = 'trending')
    {
        $keyword = $request->get('search');
        $perPage = 25;
        $query  = Launchpad::query()
            ->with(['factory'])
            ->withSum(['trades as volume24h' => fn($q) => $q->where('created_at', '>=', now()->subDays(1))], 'usd')
            ->withCount(['trades']);
        if (!empty($keyword)) {
            $query->where('contract', 'LIKE', "%$keyword%")
                ->orWhere('token', 'LIKE', "%$keyword%")
                ->orWhere('name', 'LIKE', "%$keyword%")
                ->orWhere('symbol', 'LIKE', "%$keyword%")
                ->orWhere('description', 'LIKE', "%$keyword%")
                ->orWhere('website', 'LIKE', "%$keyword%");
        }
        match ($type) {
            'mine' => $query->where('user_id', $request->user()?->id),
            'trending' => $query->latest('volume24h'),
            'rising' => $query->latest('trades_count'),
            'new' => $query->latest(),
            'finalized' => $query->where('status', LaunchpadStatus::FINALIZED),
            'top' => $query->where('featured', true),
            default => null,
        };
        $launchpadsItems = $query->paginate($perPage);
        return Inertia::render('Welcome', [
            'launchpads' => LaunchpadResource::collection($launchpadsItems),
            'type' => $type,
            'top' => function () {
                return $this->getTopLaunchpads();
            },
            'ads' => fn() => Promo::query()
                ->where('active', true)
                ->when(!config('app.demo', false), function (Builder $query) {
                    $query->where('starts_at', '<=', now())
                        ->where('ends_at', '>=', now());
                })
                ->inRandomOrder()
                ->take(3)
                ->get(),
            'initialTrades' => fn() => ModelsTrade::query()
                ->with('launchpad')
                ->latest()
                ->take(3)
                ->get()
                ->map(function (ModelsTrade $trade) {
                    return [
                        'id' => $trade->id,
                        'launchpad_id' => $trade->launchpad_id,
                        'txid' => $trade->txid,
                        'qty' => $trade->qty,
                        'usd' => $trade->usd,
                        'amount' => $trade->amount,
                        'address' => $trade->address,
                        'type' => $trade->type,
                        'price' => bcdiv($trade->amount, $trade->qty, 18),
                        'usd_price' => bcdiv($trade->usd, $trade->qty, 8),
                        'created_at' => $trade->created_at,
                        'date' => now()->gt($trade->created_at->addDays(7))
                            ? $trade->created_at->toDateTimeString()
                            : $trade->created_at->diffForHumans(),
                        'price' => bcdiv($trade->amount, $trade->qty, 18),
                        //launchpad
                        'contract' => $trade->launchpad->contract,
                        'token' => $trade->launchpad->token,
                        'name' => $trade->launchpad->name,
                        'symbol' => $trade->launchpad->symbol,
                        'description' => $trade->launchpad->description,
                        'chainId' => (int) $trade->launchpad->chainId,
                        'logo' => $trade->launchpad->logo,
                    ];
                })
        ]);
    }

    /**
     * Show the form for creating a new resource.
     * @return \Illuminate\View\View
     */
    public function create()
    {
        $factories = Factory::latestByChain()->get();
        return Inertia::render('Launchpads/Create', [
            'factories' => ResourcesFactory::collection($factories)->keyBy('chainId')
        ]);
    }

    /**
     * Store a newly created resource in storage.
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store(Request $request)
    {
        $request->validate([
            'factory_id' => ['required', 'integer', 'exists:factories,id'],
            'contract' => ['string', 'required'],
            'token' => ['string', 'required'],
            'name' => ['string', 'required'],
            'symbol' => ['string', 'required'],
            'description' => ['string', 'required'],
            'chainId' => ['numeric', 'required'],
            'twitter' => ['string', 'nullable'],
            'discord' => ['string', 'nullable'],
            'telegram' => ['string', 'nullable'],
            'website' => ['string', 'nullable'],
            'logo_uri' => ['nullable', 'required_if:logo_upload,false', 'string'],
            'logo_upload' => ['required', 'boolean'],
            'logo_path' => ['nullable', 'required_if:logo_upload,true'],
        ]);
        $launchpad = new Launchpad;
        $launchpad->user_id = $request->user()->id;
        $launchpad->factory_id = $request->factory_id;
        $launchpad->contract = $request->contract;
        $launchpad->token = $request->token;
        $launchpad->name = $request->name;
        $launchpad->symbol = $request->symbol;
        $launchpad->description = $request->description;
        $launchpad->chainId = $request->chainId;
        $launchpad->twitter = $request->twitter;
        $launchpad->discord = $request->discord;
        $launchpad->telegram = $request->telegram;
        $launchpad->website = $request->website;
        $launchpad->status = LaunchpadStatus::PREBOND;
        $launchpad->save();
        $upload = app(Uploads::class)->upload($request,  $launchpad, 'logo');
        $launchpad->logo = $upload->url;
        $launchpad->save();
        return redirect()->route('launchpads.show', ['launchpad' => $launchpad->contract]);
    }

    /**
     * Store a newly created resource in storage.
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function finalize(Request $request, Launchpad $launchpad)
    {
        //Gate::authorize('update', $launchpad); anyone can finalize though
        $request->validate([
            'pool' => ['string', 'required'],
        ]);
        $launchpad->pool = $request->pool;
        $launchpad->save();
        return back();
    }

    /**
     * Display the specified resource.
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function show(Request $request, Launchpad $launchpad)
    {

        return Inertia::render('Launchpads/Show', [

            'launchpad' => function () use ($launchpad) {
                $launchpad->load(['factory', 'user']);
                $launchpad->loadCount(['holders']);
                return new LaunchpadResource($launchpad);
            },

            'rate' => function () use ($launchpad) {
                return Rate::query()->where('chainId', $launchpad->chainId)->first();
            },
            'stats' => function () use ($launchpad) {
                return $this->getRank($launchpad->id);
            },
            'poolstats' => function () use ($launchpad) {
                return $this->getLatestStats($launchpad);
            },
            'trades' => function () use ($launchpad) {
                $trades = $launchpad->trades()->latest()->paginate(12);
                return Trade::collection($trades);
            },
            'holders' => function () use ($launchpad) {
                $holders = $launchpad->holders()->latest('qty')->take(100)->get();
                return Holder::collection($holders);
            },
            'msgs' => function () use ($launchpad) {
                $msgs = $launchpad->msgs()->with('user')->oldest()->take(50)->get();
                return Msg::collection($msgs);
            },
            'pinned' => function () use ($launchpad) {
                $msgs = $launchpad->msgs()->where('pinned', true)->latest()->take(2)->get();
                return Msg::collection($msgs);
            },
            'top' => function () {
                return $this->getTopLaunchpads();
            },
            'report' => $this->getTradeReport($launchpad->id)
        ]);
    }

    /**
     * Get the latest pool stats for a launchpad
     */
    public function getLatestStats(Launchpad $launchpad)
    {
        // Cache for 5 minutes since stats are updated every 5 minutes
        $stats = Cache::remember("pool_stats_{$launchpad->id}", 300, function () use ($launchpad) {
            return Poolstat::where('launchpad_id', $launchpad->id)
                ->latest('timestamp')
                ->first();
        });
        if (!$stats) {
            return [
                'priceChanges' => [
                    '1H' => 0,
                    '24H' => 0,
                    '7D' => 0
                ],
                'stats' => [
                    'volume24h' => 0,
                    'tvl' => 0,
                    'feeTier' => 0,
                    'transactions24h' => 0,
                    'totalTransactions' => 0,
                    'liquidity' => 0,
                    'currentPrice' => 0,
                    'minPrice' => 0,
                    'maxPrice' => 0
                ]
            ];
        }

        return [
            'priceChanges' => [
                '1H' => $stats->price_change_1h,
                '24H' => $stats->price_change_24h,
                '7D' => $stats->price_change_7d
            ],
            'stats' => [
                'volume24h' => $stats->volume_24h,
                'tvl' => $stats->tvl_usd,
                'feeTier' => $stats->fee_tier,
                'transactions24h' => $stats->transactions_24h,
                'totalTransactions' => $stats->total_transactions,
                'liquidity' => $stats->liquidity,
                'currentPrice' => $stats->token0_price,
                'minPrice' => $stats->min_price_24h,
                'maxPrice' => $stats->max_price_24h
            ]
        ];
