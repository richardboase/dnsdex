    }

    /**
     * Get report for trading statistics for a launchpad
     * 
     * @param int $launchpadId
     * @return array
     */
    public static function getTradeReport($launchpadId)
    {
        $now = Carbon::now();

        // Time windows for price changes
        $timeWindows = [
            '5m' => $now->copy()->subMinutes(5),
            '1h' => $now->copy()->subHour(),
            '6h' => $now->copy()->subHours(6),
            '24h' => $now->copy()->subHours(24)
        ];
        $stats = [];
        // Calculate price changes for each time window
        foreach ($timeWindows as $period => $startTime) {
            $trades = ModelsTrade::where('launchpad_id', $launchpadId)
                ->where('created_at', '>=', $startTime)
                ->orderBy('created_at')
                ->get();
            $first = $trades->first();
            $last = $trades->last();
            if ($trades->count() >= 2) {
                $firstPrice = bcdiv("$first->usd", "$first->qty", 18);
                $lastPrice = bcdiv("$last->usd", "$last->qty", 18);
                $priceChange = bcdiv(bcsub($lastPrice, $firstPrice, 18), $firstPrice, 18) * 100;
            } else {
                $priceChange = 0;
            }
            $stats["change_{$period}"] = round($priceChange, 2);
        }

        // Get trade counts and volumes for last 24h
        $last24h = DB::table('trades')
            ->where('launchpad_id', $launchpadId)
            ->where('created_at', '>=', $timeWindows['24h'])
            ->select([
                DB::raw('COUNT(*) as total_txns'),
                DB::raw('COUNT(CASE WHEN type = "buy" THEN 1 END) as buys'),
                DB::raw('COUNT(CASE WHEN type = "sell" THEN 1 END) as sells'),
                DB::raw('SUM(usd) as volume'),
                DB::raw('SUM(CASE WHEN type = "buy" THEN usd ELSE 0 END) as buy_volume'),
                DB::raw('SUM(CASE WHEN type = "sell" THEN usd ELSE 0 END) as sell_volume'),
                DB::raw('COUNT(DISTINCT CASE WHEN type = "buy" THEN address END) as buyers'),
                DB::raw('COUNT(DISTINCT CASE WHEN type = "sell" THEN address END) as sellers'),
                DB::raw('COUNT(DISTINCT address) as makers')
            ])
            ->first();

        return [
            'price_changes' => [
                '5m' => $stats['change_5m'],
                '1h' => $stats['change_1h'],
                '6h' => $stats['change_6h'],
                '24h' => $stats['change_24h']
            ],
            'transactions' => [
                'total' => $last24h->total_txns ?? 0,
                'buys' => $last24h->buys ?? 0,
                'sells' => $last24h->sells ?? 0
            ],
            'volume' => [
                'total' => round($last24h->volume ?? 0),
                'buy' => round($last24h->buy_volume ?? 0),
                'sell' => round($last24h->sell_volume ?? 0)
            ],
            'participants' => [
                'total' => $last24h->makers ?? 0,
                'buyers' => $last24h->buyers ?? 0,
                'sellers' => $last24h->sellers ?? 0
            ]
        ];
    }

    public static function getRank(int $launchpadId): array
    {
        // Create a subquery for the volume aggregation
        $volumeQuery = DB::table('launchpads as l')
            ->select([
                'l.id',
                DB::raw('SUM(t.usd) as volume')
            ])
            ->leftJoin('trades as t', 'l.id', '=', 't.launchpad_id')
            ->groupBy('l.id');

        // Use the subquery to apply the window function
        $result = DB::table(DB::raw("({$volumeQuery->toSql()}) as volumes"))
            ->mergeBindings($volumeQuery)
            ->select([
                'volume as total_volume',
                DB::raw('DENSE_RANK() OVER (ORDER BY volume DESC) as position'),
                DB::raw('(SELECT COUNT(*) FROM launchpads) as total_launchpads')
            ])
            ->where('id', $launchpadId)
            ->first();

        if (!$result) {
            throw new \Exception("Launchpad with ID {$launchpadId} not found");
        }
        return [
            'rank' => (int)$result->position,
            'totalVolume' => (float)$result->total_volume ?? 0,
            'totalLaunchpads' => (int)$result->total_launchpads
        ];
    }

    public static function getTopLaunchpads(int $limit = 10)
    {
        // Create a subquery for the volume aggregation
        $volumeQuery = DB::table('launchpads as l')
            ->select([
                'l.id',
                'l.name',
                'l.symbol',
                'l.logo',
                'l.contract',
                'l.created_at',
                DB::raw('SUM(t.usd) as volume'),
                DB::raw('MAX(t.usd) as high'),
                DB::raw('MIN(t.usd) as low')
            ])
            ->leftJoin('trades as t', 'l.id', '=', 't.launchpad_id')
            ->groupBy('l.id', 'l.name', 'l.symbol', 'l.logo', 'l.contract', 'l.created_at');  // Added missing columns

        // Use the subquery to apply the window function
        return DB::table(DB::raw("({$volumeQuery->toSql()}) as volumes"))
            ->mergeBindings($volumeQuery)
            ->select([
                'id',
                'name',
                'symbol',
                'contract',
                'logo',
                'low',
                'high',
                'created_at',
                'volume as total_volume',
                DB::raw('DENSE_RANK() OVER (ORDER BY volume DESC) as position')
            ])
            ->orderBy('volume', 'desc')
            ->limit($limit)
            ->get();
    }


    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update(Request $request, Launchpad $launchpad)
    {
        Gate::authorize('update', $launchpad);
        $request->validate([
            'twitter' => ['string', 'nullable'],
            'discord' => ['string', 'nullable'],
            'telegram' => ['string', 'nullable'],
            'website' => ['string', 'nullable'],
        ]);
        $launchpad->twitter = $request->twitter;
        $launchpad->discord = $request->discord;
        $launchpad->telegram = $request->telegram;
        $launchpad->website = $request->website;
        $launchpad->save();
        return back()->with('success', 'Launchpad updated!');
    }

    /**
     * Update the livestream information
     *
     * @param \Illuminate\Http\Request $request
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function updateLiveStream(Request $request, Launchpad $launchpad)
    {
        Gate::authorize('update', $launchpad);
        $request->validate([
            'livestreamId' => ['string', 'required', 'max:11'],
        ]);
        $launchpad->livestreamId = $request->livestreamId;
        $launchpad->save();
        return back()->with('success', 'Launchpad updated!');
    }

    /**
     * Update launchpad status
     * Will be overridded on frontend by contract status.
     * @param \Illuminate\Http\Request $request
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function updateStatus(Request $request, Launchpad $launchpad)
    {
        Gate::authorize('update', $launchpad);
        $request->validate([
            'status' => [new Enum(LaunchpadStatus::class)],
        ]);
        $launchpad->status = $request->status;
        $launchpad->save();
        return back()->with('success', 'Launchpad updated!');
    }
}


================================================
File: app/Http/Controllers/MsgsController.php
================================================
<?php

namespace App\Http\Controllers;

use App\Actions\Uploads;
use App\Events\NewMessage;
use App\Http\Resources\Msg as MessageResource;
use App\Models\Launchpad;
use App\Models\Msg;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Gate;
use Inertia\Inertia;

class MsgsController extends Controller
{
    /**
     * Get messages for a specific launchpad
     */
    public function index(Request $request, Launchpad $launchpad)
    {
        $messages = $launchpad->msgs()
            ->with('user')
            ->latest()
            ->paginate(50);
        return MessageResource::collection($messages);
    }

    /**
     * Store a new message
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'launchpad_id' => 'required|exists:launchpads,id',
            'message' => 'required_without:image_path|string|max:300',
            'image_path' => 'nullable',
            'image_upload' => 'required|boolean',
            'image_uri' => ['nullable', 'required_if:image_upload,true', 'string'],
        ]);
        $msg = new Msg();
        $msg->user_id = $request->user()->id;
        $msg->launchpad_id = $validated['launchpad_id'];
        $msg->message = $validated['message'] ?? null;
        $msg->save();
        // Handle image upload if present
        if ($request->image_upload) {
            $upload = app(Uploads::class)->upload($request, $msg, 'image');
            $msg->image = $upload->url;
            $msg->save();
        }
        // Broadcast the new message
        $msg->load('user');
        NewMessage::dispatch($msg);
        return back();
    }

    /**
     * Update message status (for moderation)
     */
    public function updateStatus(Request $request, Msg $msg)
    {
        $validated = $request->validate([
            'status' => 'required|in:active,hidden,blocked,review'
        ]);
        $msg->update(['status' => $validated['status']]);
        return new MessageResource($msg);
    }

    /**
     * Delete a message
     */
    public function destroy(Msg $msg)
    {
        Gate::authorize('delete', $msg);
        $msg->delete();
        return back();
    }
}


================================================
File: app/Http/Controllers/ProfileController.php
================================================
<?php

namespace App\Http\Controllers;

use App\Http\Requests\ProfileUpdateRequest;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Inertia\Inertia;
use Inertia\Response;

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): Response
    {
        return Inertia::render('Profile/Edit', [
            'mustVerifyEmail' => $request->user() instanceof MustVerifyEmail,
            'status' => session('status'),
        ]);
    }

    /**
     * Update the user's profile information.
     */
    public function update(ProfileUpdateRequest $request): RedirectResponse
    {
        $request->user()->fill($request->validated());

        if ($request->user()->isDirty('email')) {
            $request->user()->email_verified_at = null;
        }

        $request->user()->save();

        return Redirect::route('profile.edit');
    }

    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validate([
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return Redirect::to('/');
    }
}


================================================
File: app/Http/Controllers/S3Controller.php
================================================
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Http;
use Illuminate\Http\Request;
use Storage;
use Str;

class S3Controller extends Controller
{
    /**
     * Display a listing of the resource.
     * @return \Illuminate\View\View
     */
    public function sign(Request $request, $disk = "do", $folder = "logos")
    {
        $spaces = Storage::disk($disk);
        $client = $spaces->getClient();
        $expiry = "+10 minutes";
        $random =  Str::random(20);
        $fileName = $folder . '/' . $random . '.' . $request->ext;
        $cmd = $client->getCommand('PutObject', [
            'Bucket' => \Config::get("filesystems.disks.{$disk}.bucket"),
            'Key' =>    $fileName,
            'ACL' => 'public-read',
        ]);
        $signed = $client->createPresignedRequest($cmd, $expiry);
        $presignedUrl = (string) $signed->getUri();
        $deletCommand = $client->getCommand('DeleteObject', [
            'Bucket' => \Config::get("filesystems.disks.{$disk}.bucket"),
            'Key' =>   $fileName,
            'contentType' => $request->type
        ]);
        $delete = $client->createPresignedRequest($deletCommand, $expiry);
        $deleteUrl = (string)$delete->getUri();
        $cdn = config("filesystems.disks.{$disk}.cdn");
        $url = str($cdn)->endsWith('/') ? $cdn . $fileName : $cdn . '/' . $fileName;
        return response()->json(['url' => $presignedUrl, 'file' => $fileName, 'link' => $url, 'remove' => $deleteUrl], 201);
    }

    public function purge($fileName)
    {
        $folder = config('filesystems.do.folder');
        Http::asJson()->delete(
            config('filesystems.do.cdn_endpoint') . '/cache',
            [
                'files' => ["{$folder}/{$fileName}"],
            ]
        );
    }
}


================================================
File: app/Http/Controllers/TradesController.php
================================================
<?php

namespace App\Http\Controllers;

use App\Enums\TradeType;
use App\Http\Controllers\Controller;
use App\Models\Trade;
use Illuminate\Http\Request;
use App\Models\Launchpad;
use App\Models\Rate;
use App\Services\CandleService;
use Carbon\Carbon;
use Illuminate\Http\JsonResponse;
use Illuminate\Validation\Rules\Enum;

class TradesController extends Controller
{

    protected $candleService;

    public function __construct(CandleService $candleService)
    {
        $this->candleService = $candleService;
    }

    /**
     * Store a newly created resource in storage.
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store(Request $request)
    {
        $request->validate([
            'launchpad_id' => ['required', 'integer', 'exists:launchpads,id'],
            'address' => ['required', 'string'],
            'qty' => ['required', 'string'],
            'txid' => ['required', 'string'],
            'amount' => ['required', 'string'],
            'type' => ['required', 'string', 'max:255', new Enum(TradeType::class)],
        ]);
        $trade = Trade::where('txid', $request->txid)->firstOrNew();
        $user = $request->user();
        //if user in not current silently discard
        if (strtolower($user->address) != strtolower($request->address)) return back();
        $trade->launchpad_id = $request->launchpad_id;
        $trade->txid = $request->txid;
        $trade->address = $request->address;
        $trade->qty = $request->qty;
        $trade->amount = $request->amount;
        $trade->type = $request->type;
        $trade->save();
        $launchpad = $trade->launchpad()->first();
        $rate = Rate::where('chainId', $launchpad->chainId)->first();
        if ($rate) {
            $trade->usd = $request->amount * $rate->usd_rate;
            $trade->save();
        }

        return back();
    }


    /**
     * Get OHLCV candles for TradingView chart
     */
    public function getCandles(Request $request, Launchpad $launchpad): JsonResponse
    {
        $request->validate([
            'timeframe' => 'required|string',
            'from' => 'required|integer',
            'to' => 'required|integer',
        ]);
        $from = Carbon::createFromTimestamp($request->from);
        $to = Carbon::createFromTimestamp($request->to);
        $candles = $this->candleService->getCandles(
            $launchpad,
            $request->timeframe,
            $from,
            $to
        );
        return response()->json($candles);
    }
}


================================================
File: app/Http/Controllers/Admin/DashboardController.php
================================================
<?php

namespace App\Http\Controllers\Admin;

use App\Enums\SettingRpc;
use App\Http\Controllers\Controller;
