
================================================
File: app/Http/Controllers/Auth/Web3AuthController.php
================================================
<?php

namespace App\Http\Controllers\Auth;

use App\Actions\Signature;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use Illuminate\Auth\Events\Registered;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;
use App\Http\Controllers\Controller;

class Web3AuthController extends Controller
{
    /**
     * Verify the signature and authenticate the user
     *
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function create(Request $request): RedirectResponse
    {

        try {
            // Validate request
            $validated = $request->validate([
                'address' => 'required|string|starts_with:0x|size:42',
                'signature' => 'required|string|starts_with:0x',
            ]);
            // Get the stored code from session
            $code = session('web3_auth_code');
            if (!$code) return back()->with('error', __('No authentication code found in session'));
            // Verify the signature
            $isValid = Signature::verify(
                $code,
                $validated['signature'],
                $validated['address']
            );

            if (!$isValid) return back()->with('error', __('Invalid signature'));
            // Clear the code from session
            session()->forget('web3_auth_code');
            // Store the verified address in session
            $user = User::query()->firstOrCreate(['address' => $request->address]);
            event(new Registered($user));
            Auth::login($user);
            $request->session()->regenerate();
            return back()->with('success', __('Address verified successfully'));
        } catch (\Illuminate\Validation\ValidationException $e) {
            return back()->with('error', __('Validation failed'));
        } catch (\Exception $e) {
            return back()->with('error', __('Verification failed'));
        }
    }




    /**
     * code - get an authcode
     *
     * @param Request $request
     * @return RedirectResponse
     */
    public function authCode(Request $request)
    {
        $code = Str::random(20);
        session(['web3_auth_code' => $code]);
        return ['authCode' => $code];
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();
        $request->session()->invalidate();
        $request->session()->regenerateToken();
        return redirect('/');
    }
}


================================================
File: app/Http/Middleware/AppkitCsp.php
================================================
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class AppkitCsp
{
    public function handle(Request $request, Closure $next)
    {
        $response = $next($request);

        $response->header(
            'Content-Security-Policy-Report-Only',
            "frame-ancestors 'self' http://localhost:* https://*.pages.dev https://*.vercel.app https://*.ngrok-free.app https://secure-mobile.walletconnect.com https://secure-mobile.walletconnect.org https://secure.walletconnect.org"
        );
        $response->header('Cross-Origin-Opener-Policy', 'unsafe-none');
        return $response;
    }
}


================================================
File: app/Http/Middleware/DemoMode.php
================================================
<?php

namespace App\Http\Middleware;

use Auth;
use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class DemoMode
{
    /**
     * Handle an incoming request.
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (config('app.demo') && !$request->user()?->isAdmin()) {
            return redirect()
                ->back()
                ->with('error', 'Updating this item is disabled on the demo');
        }

        return $next($request);
    }
}


================================================
File: app/Http/Middleware/HandleInertiaRequests.php
================================================
<?php

namespace App\Http\Middleware;

use App\Http\Resources\User;
use App\Models\Factory;
use App\Models\Rate;
use App\Models\Setting;
use Auth;
use Cache;
use Illuminate\Http\Request;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\File;
use Inertia\Middleware;

class HandleInertiaRequests extends Middleware
{
    /**
     * The root template that is loaded on the first page visit.
     *
     * @var string
     */
    protected $rootView = 'app';

    /**
     * Determine the current asset version.
     */
    public function version(Request $request): ?string
    {
        return parent::version($request);
    }

    /**
     * Define the props that are shared by default.
     *
     * @return array<string, mixed>
     */
    public function share(Request $request): array
    {
        $setting = Setting::find(1);
        $isAdminRoute = str_starts_with(request()->route()?->getName() ?? '', 'admin.') ||
            str_starts_with(request()->path(), 'admin/');
        return [
            ...parent::share($request),
            'auth' => [
                'user' => Auth::check() ? new User($request->user()) : null,
            ],
            'flash' => value(function () use ($request) {
                return array_filter([
                    'info' => $request->session()->get('message') ?? $request->session()->get('info'),
                    'error' => $request->session()->get('error'),
                    'success' => $request->session()->get('success'),
                ]);
            }),
            'links' => [...config('app.links', []), ...Arr::only(
                $setting->toArray(),
                [
                    'twitter',
                    'youtube',
                    'tgGroup',
                    'tgChannel',
                    'discord',
                    'documentation',
                ]
            )],
            'appName' => $setting->name ?? config('app.name'),
            'appLogo' => $setting->logo,
            'uploadsDisk' => fn() => config('filesystems.default'),
            's3' => fn() => config('filesystems.default') != 'public',
            'profilePhotoDisk' => fn() => config('filesystems.profile_photo_disk'),
            'chainIds' => fn() => Cache::remember('chainids', 60, function () {
                $foundry = json_decode(File::get(base_path('evm/Foundry.json')), true);
                return array_keys($foundry['addresses']);
            }),
            ...Arr::only(
                $setting->toArray(),
                [
                    'rpc',
                    'ankr',
                    'infura',
                    'blast',
                    'chat',
                    'featured',
                ]
            ),
            ...(config('evm.ankr_key', null) ? ['ankr' => config('evm.ankr_key')] : []),
            ...(config('evm.blastapi_key', null) ? ['blast' => config('evm.blastapi_key')] : []),
            ...(config('evm.infura_key', null) ? ['infura' => config('evm.infura_key')] : []),
            'evm' => collect(config('evm'))->values()->reject(function ($evm) {
                return !is_array($evm) || !isset($evm['chainId']) || !isset($evm['symbol']);
            })->keyBy('chainId'),
            'activeChains' => function () use ($isAdminRoute) {
                if ($isAdminRoute) {
                    return Cache::remember('chainids2', 60, function () {
                        $foundry = json_decode(File::get(base_path('evm/Foundry.json')), true);
                        return collect(array_keys($foundry['addresses']))->map(fn($ch) => (int)$ch)->values()->unique()->all();
                    });
                }
                $chains = Factory::query()->pluck('chainId')->map(fn($ch) => (int)$ch)->values()->unique()->all();
                return [...$chains, 11155111]; // always return sepolia
            },
            'isAdminRoute' => $isAdminRoute,
            'projectId' => config('evm.project_id'),
            'usdRates' =>  function () {
                return Rate::query()->pluck('usd_rate', 'chainId')->all();
            },
        ];
    }
}


================================================
File: app/Http/Middleware/IsAdmin.php
================================================
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class IsAdmin
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (Auth::check() && (config('app.demo', false) || $request->user()?->isAdmin()))
            return $next($request);
        return redirect('/');
    }
}


================================================
File: app/Http/Requests/ProfileUpdateRequest.php
================================================
<?php

namespace App\Http\Requests;

use App\Models\User;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProfileUpdateRequest extends FormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'email' => [
                'required',
                'string',
                'lowercase',
                'email',
                'max:255',
                Rule::unique(User::class)->ignore($this->user()->id),
            ],
        ];
    }
}


================================================
File: app/Http/Requests/Auth/LoginRequest.php
================================================
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->string('email')) . '|' . $this->ip());
    }
}


================================================
File: app/Http/Resources/Factory.php
================================================
<?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class Factory extends JsonResource
{

    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function toArray($request)
    {
        return [
            'id' => $this->id,
            'version' => $this->version,
            'chainId' => $this->chainId,
            'foundry' => $this->foundry,
            'contract' => $this->contract,
            'lock' => $this->lock,
            'lock_abi' => $this->lock_abi,
            'factory_abi' => $this->factory_abi,
            'launchpads_count' => $this->launchpads_count,
            'abi' => $this->abi,
            'busy' => false,
            'active' => $this->active,
            'launchpads' => Launchpad::collection($this->whenLoaded('launchpads')),
        ];
    }
}


================================================
File: app/Http/Resources/Holder.php
================================================
<?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class Holder extends JsonResource
{

    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function toArray($request)
    {
        return [
            'id' => $this->id,
            'launchpad_id' => $this->launchpad_id,
            'user_id' => $this->user_id,
            'address' => $this->address,
            'percentage' => bcdiv(bcmul("$this->qty", "100", 18), '1000000000', 4),
            'qty' => $this->qty,
            'prebond' => $this->prebond,
            'launchpad' => new Launchpad($this->whenLoaded('launchpad')),
            'user' => new User($this->whenLoaded('user')),
        ];
    }
}


================================================
File: app/Http/Resources/Launchpad.php
================================================
<?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class Launchpad extends JsonResource
{

    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function toArray($request)
    {
        return [
            'id' => $this->id,
            'user_id' => $this->user_id,
            'factory_id' => $this->factory_id,
            'contract' => $this->contract,
            'token' => $this->token,
            'name' => $this->name,
            'symbol' => $this->symbol,
            'description' => $this->description,
            'chainId' => (int) $this->chainId,
            'twitter' => $this->twitter,
            'discord' => $this->discord,
            'telegram' => $this->telegram,
            'website' => $this->website,
            'livestreamId' => $this->livestreamId,
            'status' => $this->status,
            'logo' => $this->logo,
