
const emit = defineEmits(['update:checked']);

const props = defineProps({
    checked: {
        type: [Array, Boolean],
        required: true,
    },
    value: {
        default: null,
    },
});

const proxyChecked = computed({
    get() {
        return props.checked;
    },

    set(val) {
        emit('update:checked', val);
    },
});
</script>

<template>
    <input
        type="checkbox"
        :value="value"
        v-model="proxyChecked"
        class="rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500"
    />
</template>


================================================
File: resources/js/Components/CollapseTransition.vue
================================================
<script setup>
	// import { nextTick } from "vue";
	const props = defineProps({
		duration: { type: Number, default: 250 },
		easingEnter: { type: String, default: "ease-in-out" },
		easingLeave: { type: String, default: "ease-in-out" },
		opacityClosed: { type: Number, default: 0 },
		opacityOpened: { type: Number, default: 1 },
	});

	const closed = "0px";
	function getElementStyle(element) {
		return {
			height: element.style.height,
			width: element.style.width,
			position: element.style.position,
			visibility: element.style.visibility,
			overflow: element.style.overflow,
			paddingTop: element.style.paddingTop,
			paddingBottom: element.style.paddingBottom,
			borderTopWidth: element.style.borderTopWidth,
			borderBottomWidth: element.style.borderBottomWidth,
			marginTop: element.style.marginTop,
			marginBottom: element.style.marginBottom,
		};
	}

	function prepareElement(element, initialStyle) {
		const { width } = getComputedStyle(element);
		element.style.width = width;
		element.style.position = "absolute";
		element.style.visibility = "hidden";
		element.style.height = "";

		const { height } = getComputedStyle(element);
		element.style.width = initialStyle.width;
		element.style.position = initialStyle.position;
		element.style.visibility = initialStyle.visibility;
		element.style.height = closed;
		element.style.overflow = "hidden";
		return initialStyle.height && initialStyle.height != closed
			? initialStyle.height
			: height;
	}

	function animateTransition(
		element,
		initialStyle,
		done,
		keyframes,
		options,
	) {
		const animation = element.animate(keyframes, options);
		// Set height to 'auto' to restore it after animation
		element.style.height = initialStyle.height;
		animation.onfinish = () => {
			element.style.overflow = initialStyle.overflow;
			done();
		};
	}

	function getEnterKeyframes(height, initialStyle) {
		return [
			{
				height: closed,
				opacity: props.opacityClosed,
				paddingTop: closed,
				paddingBottom: closed,
				borderTopWidth: closed,
				borderBottomWidth: closed,
				marginTop: closed,
				marginBottom: closed,
			},
			{
				height,
				opacity: props.opacityOpened,
				paddingTop: initialStyle.paddingTop,
				paddingBottom: initialStyle.paddingBottom,
				borderTopWidth: initialStyle.borderTopWidth,
				borderBottomWidth: initialStyle.borderBottomWidth,
				marginTop: initialStyle.marginTop,
				marginBottom: initialStyle.marginBottom,
			},
		];
	}

	function enterTransition(element, done) {
		const HTMLElement = element;
		const initialStyle = getElementStyle(HTMLElement);
		const height = prepareElement(HTMLElement, initialStyle);
		const keyframes = getEnterKeyframes(height, initialStyle);
		const options = { duration: props.duration, easing: props.easingEnter };
		animateTransition(HTMLElement, initialStyle, done, keyframes, options);
	}

	function leaveTransition(element, done) {
		const HTMLElement = element;
		const initialStyle = getElementStyle(HTMLElement);
		const { height } = getComputedStyle(HTMLElement);
		HTMLElement.style.height = height;
		HTMLElement.style.overflow = "hidden";

		const keyframes = getEnterKeyframes(height, initialStyle).reverse();
		const options = { duration: props.duration, easing: props.easingLeave };

		animateTransition(HTMLElement, initialStyle, done, keyframes, options);
	}
</script>

<template>
	<Transition :css="false" @enter="enterTransition" @leave="leaveTransition">
		<slot />
	</Transition>
</template>


================================================
File: resources/js/Components/ConfirmationModal.vue
================================================
<script setup>
	import Modal from "./Modal.vue";

	const emit = defineEmits(["close"]);

	defineProps({
		show: {
			type: Boolean,
			default: false,
		},
		maxWidth: {
			type: String,
			default: "2xl",
		},
		closeable: {
			type: Boolean,
			default: true,
		},
	});

	const close = () => {
		emit("close");
	};
</script>

<template>
	<Modal
		:show="show"
		:max-width="maxWidth"
		:closeable="closeable"
		@close="close">
		<div class="bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
			<div class="sm:flex sm:items-start">
				<slot name="icon">
					<div
						class="mx-auto shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
						<svg
							class="h-6 w-6 text-red-600"
							stroke="currentColor"
							fill="none"
							viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
						</svg>
					</div>
				</slot>
				<div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
					<h3 class="text-lg">
						<slot name="title" />
					</h3>

					<div class="mt-2">
						<slot name="content" />
					</div>
				</div>
			</div>
		</div>

		<div
			class="flex flex-row justify-end align-middle items-center px-6 py-4 text-right">
			<slot name="footer" />
		</div>
	</Modal>
</template>


================================================
File: resources/js/Components/CountDownWhite.vue
================================================
<script setup>
	import { computed } from "vue";

	import { useCountDown } from "@/hooks/useCountDown";

	const props = defineProps({
		timestamp: Number,
		simple: Boolean,
	});

	const time = computed(() => parseInt(props.timestamp) * 1000);
	const { years, months, days, hours, minutes, seconds, totalDays } =
		useCountDown(time);

	const showYearsFormat = computed(() => totalDays.value >= 365);
	const showMonthsFormat = computed(
		() => totalDays.value >= 100 && totalDays.value < 365,
	);
</script>

<template>
	<!-- Years Format (>= 365 days) -->
	<div v-if="showYearsFormat" class="grid grid-cols-4 gap-5 text-center">
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-1.5">
			<span
				class="font-mono countdown font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				{{ years }}
			</span>
			<span class="text-xs" v-if="simple">{{ $t("years") }}</span>
			<span v-else>{{ $t("years") }}</span>
		</div>
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-1.5">
			<span
				class="countdown font-mono font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				<span :style="{ '--value': months ?? '00' }"></span>
			</span>
			<span class="text-xs" v-if="simple">{{ $t("months") }}</span>
			<span v-else>{{ $t("months") }}</span>
		</div>
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-1.5">
			<span
				class="countdown font-mono font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				<span :style="{ '--value': days ?? '00' }"></span>
			</span>
			<span class="text-xs" v-if="simple">{{ $t("days") }}</span>
			<span v-else>{{ $t("days") }}</span>
		</div>
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-1.5">
			<span
				class="countdown font-mono font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				<span :style="{ '--value': seconds ?? '00' }"></span>
			</span>
			<span class="text-xs" v-if="simple">{{ $t("sec") }}</span>
			<span v-else>{{ $t("sec") }}</span>
		</div>
	</div>

	<!-- Months Format (100-364 days) -->
	<div
		v-else-if="showMonthsFormat"
		class="grid grid-cols-4 gap-5 text-center">
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-1.5">
			<span
				class="countdown font-mono font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				<span :style="{ '--value': months ?? '00' }"></span>
			</span>
			<span class="text-xs" v-if="simple">{{ $t("months") }}</span>
			<span v-else>{{ $t("months") }}</span>
		</div>
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-1.5">
			<span
				class="countdown font-mono font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				<span :style="{ '--value': days ?? '00' }"></span>
			</span>
			<span class="text-xs" v-if="simple">{{ $t("days") }}</span>
			<span v-else>{{ $t("days") }}</span>
		</div>
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-1.5">
			<span
				class="countdown font-mono font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				<span :style="{ '--value': hours ?? '00' }"></span>
			</span>
			<span class="text-xs" v-if="simple">{{ $t("hours") }}</span>
			<span v-else>{{ $t("hours") }}</span>
		</div>
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-1.5">
			<span
				class="countdown font-mono font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				<span :style="{ '--value': seconds ?? '00' }"></span>
			</span>
			<span class="text-xs" v-if="simple">{{ $t("sec") }}</span>
			<span v-else>{{ $t("sec") }}</span>
		</div>
	</div>

	<!-- Regular Format (<100 days) -->
	<div v-else class="grid grid-cols-4 gap-5 text-center">
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-1.5">
			<span
				class="countdown font-mono font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				<span :style="{ '--value': days ?? '00' }"></span>
			</span>
			<span class="text-xs" v-if="simple">{{ $t("days") }}</span>
			<span v-else>{{ $t("days") }}</span>
		</div>
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-2">
			<span
				class="countdown font-mono font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				<span :style="{ '--value': hours ?? '00' }"></span>
			</span>
			<span class="text-xs" v-if="simple">{{ $t("hours") }}</span>
			<span v-else>{{ $t("hours") }}</span>
		</div>
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-2">
			<span
				class="countdown font-mono font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				<span :style="{ '--value': minutes ?? '00' }"></span>
			</span>
			<span class="text-xs" v-if="simple">{{ $t("min") }}</span>
			<span v-else>{{ $t("min") }}</span>
		</div>
		<div
			class="flex flex-col border border-amber-300 dark:border-gray-700 bg-amber-100/20 dark:bg-gray-600/10 rounded-md p-2">
			<span
				class="countdown font-mono font-semibold text-gray-600 dark:text-gray-200 text-sm md:text-xl flex justify-center">
				<span :style="{ '--value': seconds ?? '00' }"></span>
			</span>
			<span class="text-xs" v-if="simple">{{ $t("sec") }}</span>
			<span v-else>{{ $t("sec") }}</span>
		</div>
	</div>
</template>

<style>
	.countdown {
		line-height: 1em;
	}

	.countdown {
		display: inline-flex;
	}

	.countdown > * {
		height: 1em;
		display: inline-block;
		overflow-y: hidden;
	}

	.countdown > *:before {
		position: relative;
		content: "00\a 01\a 02\a 03\a 04\a 05\a 06\a 07\a 08\a 09\a 10\a 11\a 12\a 13\a 14\a 15\a 16\a 17\a 18\a 19\a 20\a 21\a 22\a 23\a 24\a 25\a 26\a 27\a 28\a 29\a 30\a 31\a 32\a 33\a 34\a 35\a 36\a 37\a 38\a 39\a 40\a 41\a 42\a 43\a 44\a 45\a 46\a 47\a 48\a 49\a 50\a 51\a 52\a 53\a 54\a 55\a 56\a 57\a 58\a 59\a 60\a 61\a 62\a 63\a 64\a 65\a 66\a 67\a 68\a 69\a 70\a 71\a 72\a 73\a 74\a 75\a 76\a 77\a 78\a 79\a 80\a 81\a 82\a 83\a 84\a 85\a 86\a 87\a 88\a 89\a 90\a 91\a 92\a 93\a 94\a 95\a 96\a 97\a 98\a 99\a";
		white-space: pre;
		top: calc(var(--value) * -1em);
		text-align: center;
		transition: all 1s cubic-bezier(1, 0, 0, 1);
	}
</style>


================================================
File: resources/js/Components/DangerButton.vue
================================================
<template>
	<button
		:class="[
			'inline-flex items-center justify-center font-medium transition-colors duration-200',
			'focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2',
			sizeClasses[size],
			iconMode ? 'aspect-square p-0' : '',
			outlined
				? 'bg-transparent border-2 border-red-400 text-red-400 hover:bg-red-600 hover:text-white'
				: 'bg-red-600 text-white border-2 border-transparent hover:bg-red-500 active:bg-red-700',
			'rounded cursor-pointer',
		]"
		v-bind="$attrs">
		<slot></slot>
	</button>
</template>

<script setup>
	import { computed } from "vue";

	const props = defineProps({
		outlined: {
			type: Boolean,
			default: false,
		},
		size: {
			type: String,
			default: "sm",
			validator: (value) =>
				["xs", "sm", "md", "lg", "xl"].includes(value),
		},
		iconMode: {
			type: Boolean,
			default: false,
		},
	});

	const sizeClasses = computed(() => ({
		xs: props.iconMode
			? "w-6 h-6 text-xs"
			: "px-2.5 py-1.5 font-semibold text-xs",
		sm: props.iconMode ? "w-8 h-8 text-sm" : "px-3 py-2 text-sm",
		md: props.iconMode ? "w-10 h-10 text-base" : "px-4 py-2.5 text-base",
		lg: props.iconMode ? "w-12 h-12 text-lg" : "px-5 py-3 text-lg",
		xl: props.iconMode ? "w-14 h-14 text-xl" : "px-6 py-3.5 text-xl",
	}));
</script>


================================================
File: resources/js/Components/Dropdown.vue
================================================
<script setup>
	import { computed, onMounted, onUnmounted, ref } from "vue";

	const props = defineProps({
		align: {
			type: String,
			default: "right",
		},
		width: {
			type: String,
			default: "48",
		},
		contentClasses: {
			type: String,
			default: "py-1 bg-white dark:bg-gray-700",
		},
	});

	const closeOnEscape = (e) => {
		if (open.value && e.key === "Escape") {
			open.value = false;
		}
	};

	onMounted(() => document.addEventListener("keydown", closeOnEscape));
	onUnmounted(() => document.removeEventListener("keydown", closeOnEscape));

	const widthClass = computed(() => {
		return {
			48: "w-48",
		}[props.width.toString()];
	});

	const alignmentClasses = computed(() => {
		if (props.align === "left") {
			return "ltr:origin-top-left rtl:origin-top-right start-0";
		} else if (props.align === "right") {
			return "ltr:origin-top-right rtl:origin-top-left end-0";
		} else {
			return "origin-top";
		}
	});

	const open = ref(false);
</script>

<template>
	<div class="relative">
		<div @click="open = !open">
			<slot :open="open" name="trigger" />
		</div>

		<!-- Full Screen Dropdown Overlay -->
		<div
			v-show="open"
			class="fixed inset-0 z-40"
			@click="open = false"></div>

		<Transition
			enter-active-class="transition ease-out duration-200"
			enter-from-class="opacity-0 scale-95"
			enter-to-class="opacity-100 scale-100"
			leave-active-class="transition ease-in duration-75"
			leave-from-class="opacity-100 scale-100"
			leave-to-class="opacity-0 scale-95">
			<div
				v-show="open"
				class="absolute z-50 mt-2 rounded-md shadow-lg"
				:class="[widthClass, alignmentClasses]"
				style="display: none"
