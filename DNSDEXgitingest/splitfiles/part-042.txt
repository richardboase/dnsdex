				@click="open = false">
				<div
					class="rounded ring-1 ring-gray-700 ring-opacity-50"
					:class="contentClasses">
					<slot name="content" />
				</div>
			</div>
		</Transition>
	</div>
</template>


================================================
File: resources/js/Components/DropdownLink.vue
================================================
<script setup>
	import { Link } from "@inertiajs/vue3";

	defineProps({
		href: {
			type: String,
			required: true,
		},
		active: Boolean,
	});
</script>

<template>
	<Link
		:href="href"
		:class="active ? 'text-primary' : 'text-gray-700 dark:text-gray-300'"
		class="block w-full px-4 py-2 text-start text-sm leading-5 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:bg-gray-100 dark:focus:bg-gray-800 transition duration-150 ease-in-out">
		<slot />
	</Link>
</template>


================================================
File: resources/js/Components/FileUploader.vue
================================================
<script setup>
	import { computed, ref, watch } from "vue";

	import { ArrowUpTrayIcon, XMarkIcon } from "@heroicons/vue/24/outline";
	import axios from "axios";

	import Loading from "@/Components/Loading.vue";
	const props = defineProps({
		modelValue: String,
		file: String,
		errors: String,
		auto: Boolean,
		deleteUri: String,
		disk: String,
	});

	const logo = ref(null);
	const logoUri = ref(null);
	const percent = ref(0);
	const busy = ref(false);
	const deleteUrl = ref(props.deleteUri);
	const onUploadProgress = (bytes) => {
		percent.value = (bytes / logo.value.size) * 100;
	};

	const emit = defineEmits(["update:modelValue", "update:file"]);
	const spacesPath = computed({
		get() {
			return props.modelValue;
		},
		set(value) {
			emit("update:modelValue", value);
		},
	});
	const logoError = computed({
		get() {
			return props.logoError;
		},
		set(value) {
			emit("update:logoError", value);
		},
	});
	const uploadPath = computed({
		get() {
			return props.file;
		},
		set(value) {
			emit("update:file", value);
		},
	});

	const uploadToSpaces = async () => {
		if (!logo.value) return false;

		const fileExtension = logo.value.type.split("/").pop();
		const {
			data: { url, link, file, remove },
		} = await axios.post(window.route("s3.sign", { disk: props.disk }), {
			ext: fileExtension,
			name: logo.value.name,
			type: logo.value.type,
		});

		await axios.put(url, logo.value, {
			headers: {
				"x-amz-acl": "public-read",
				"Content-Type": logo.value.type,
			},
			onUploadProgress,
			crossdomain: true,
		});
		busy.value = false;
		spacesPath.value = link;
		uploadPath.value = file;
		deleteUrl.value = remove;
	};

	const reader = new FileReader();
	reader.onload = function (e) {
		logoUri.value = e.target.result;
	};

	const setLogo = async (lgo) => {
		if (lgo.size > 512000) {
			return (logoError.value = "Max 512Kb");
		}
		if (
			!["image/jpeg", "image/gif", "image/png", "image/svg+xml"].includes(
				lgo.type,
			)
		)
			return (logoError.value = "Unsupported");
		logoError.value = null;
		busy.value = true;
		logo.value = lgo;
		props.auto && uploadToSpaces();
	};

	watch(logo, (logo) => {
		if (logo) reader.readAsDataURL(logo);
		else logoUri.value = null;
	});
	const deleting = ref(false);
	const clearFile = async () => {
		deleting.value = true;
		if (deleteUrl.value) {
			await axios.delete(deleteUrl.value);
		}
		logoUri.value = null;
		logo.value = null;
		spacesPath.value = null;
		percent.value = 0;
		deleting.value = false;
	};

	const preview = computed(() => {
		return spacesPath.value ?? logoUri.value;
	});
</script>
<template>
	<div
		class="w-full group hover:border-sky-500 dark:hover:border-sky-400 cursor-pointer bg-gray-100 dark:bg-gray-800 rounded border-2 border-gray-300 dark:border-gray-650 border-dashed transition-colors duration-200">
		<label
			class="flex-grow h-full w-full p-0 flex items-center justify-center cursor-pointer font-medium text-white">
			<input
				tabindex="-1"
				type="file"
				@input="setLogo($event.target.files[0])"
				class="pointer-events-none absolute inset-0 h-full w-full opacity-0" />
			<Loading v-if="busy" />
			<img v-else-if="preview" class="w-full h-full" :src="preview" />
			<ArrowUpTrayIcon v-else class="h-5 w-5" />
			<slot></slot>
		</label>
		<div v-if="spacesPath" class="-mt-8 flex justify-end">
			<button
				@click.prevent="clearFile()"
				class="btn space-x-2 z-50 bg-red-500 text-base py-1 font-medium text-white hover:bg-error hover:shadow-lg hover:shadow-error/50 focus:bg-error focus:shadow-lg focus:shadow-error/50 active:bg-error/90">
				<span>Delete</span>
				<Loading
					class="w-4 h-4 text-white ml-2 -mr-1"
					v-if="deleting" />
				<XMarkIcon v-else class="w-4 h-4 text-white ml-2 -mr-1" />
			</button>
		</div>
	</div>
</template>
<style></style>


================================================
File: resources/js/Components/FileUploaderLocal.vue
================================================
<script setup>
	import { computed, reactive, ref } from "vue";

	import { usePage } from "@inertiajs/vue3";
	import FilePondPluginFileValidateType from "filepond-plugin-file-validate-type";
	import FilePondPluginImagePreview from "filepond-plugin-image-preview";
	import "filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css";
	import vueFilePond from "vue-filepond";

	defineProps({
		modelValue: String,
	});

	const emit = defineEmits(["update:modelValue"]);
	const FilePond = vueFilePond(
		FilePondPluginFileValidateType,
		FilePondPluginImagePreview,
	);
	const server = reactive({
		url: "/filepond/api",
		process: "/process",
		revert: "/process",
		patch: "?patch=",
		headers: {
			"X-CSRF-TOKEN": computed(() => usePage().props.csrf_token),
		},
	});
	const uploadError = ref(null);
	const handleProcessFile = (error, file) => {
		if (error) uploadError.value = error;
		console.log(file);
		emit("update:file", {
			serverId: file.serverId,
			fileExtension: file.fileExtension,
			fileType: file.fileType,
			filenameWithoutExtension: file.filenameWithoutExtension,
			id: file.id,
		});
		emit("update:modelValue", file.filename);
	};

	const acceptecFiles = [
		"image/jpeg",
		"image/jpg",
		"image/png",
		"image/gif",
		"image/bmp",
		"image/svg+xml",
		"video/mp4",
		"video/webm",
		"video/ogg",
	];
</script>

<template>
	<div
		class="w-full group hover:border-sky-500 dark:hover:border-sky-400 cursor-pointer bg-gray-100 dark:bg-gray-800 rounded border-2 border-gray-300 dark:border-gray-650 border-dashed transition-colors duration-200">
		<label class="cursor-pointer">
			<FilePond
				name="filepond"
				ref="pond"
				class-name="filepond nft-upload !mb-0"
				label-idle="Upload NFT"
				:allow-multiple="false"
				:allowImagePreview="true"
				:allowVideoPreview="true"
				stylePanelLayout="compact"
				labelIdle="<svg xmlns='http://www.w3.org/2000/svg' class='h-6 w-6' fill='none' viewbox='0 0 24 24' stroke='currentColor'>
                                      <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12'></path>
                                    </svg>"
				:accepted-file-types="acceptecFiles.join(',')"
				:server="server"
				@processfile="handleProcessFile" />
		</label>
	</div>
</template>


================================================
File: resources/js/Components/FormInput.vue
================================================
<script setup>
	import { computed, ref, useSlots } from "vue";

	import { ExclamationCircleIcon } from "@heroicons/vue/24/outline";
	import { nanoid } from "nanoid";
	const props = defineProps({
		modelValue: [String, Number],
		placeholder: [String, Number],
		autocomplete: [String, Number],
		id: [String, Number],
		inputClasses: [String, Array],
		hide: Boolean,
		disabled: Boolean,
		readonly: Boolean,
		required: Boolean,
		autofocus: Boolean,
		label: String,
		type: String,
		error: String,
		help: String,
		size: {
			type: String,
			default: "sm",
		},
	});
	defineEmits([
		"update:modelValue",
		"changed",
		"focused",
		"unfocused",
		"onKeyUp",
	]);
	const slots = useSlots();
	const lg = computed(() => props.size === "lg");
	const sm = computed(() => props.size === "sm");
	const xs = computed(() => props.size === "xs");
	const xm = computed(() => props.size === "xm");
	const md = computed(() => props.size === "md");
	const xl = computed(() => props.size === "xl");
	const xl2 = computed(() => props.size === "2xl");
	const trail = computed(() => !!slots.trail);
	const lead = computed(() => !!slots.lead);
	const classes = computed(() => {
		if (xs.value)
			return `py-1 text-xs ${lead.value ? "pl-12" : "pl-1"} ${
				trail.value ? "pr-12" : "pr-1"
			}`;
		if (xm.value)
			return `py-1.5 text-sm ${lead.value ? "pl-6" : "pl-1"} ${
				trail.value ? "pr-6" : "pr-1"
			}`;
		if (sm.value)
			return `py-2 text-sm ${lead.value ? "pl-8" : "pl-2"} ${
				trail.value ? "pr-12" : "pr-2"
			}`;
		if (md.value)
			return `py-3 text-base ${lead.value ? "pl-12" : "pl-3"} ${
				trail.value ? "pr-12" : "pr-3"
			}`;
		if (lg.value)
			return `py-4 text-lg ${lead.value ? "pl-12" : "pl-4"} ${
				trail.value ? "pr-12" : "pr-4"
			}`;
		if (xl.value)
			return `py-5 text-xl ${lead.value ? "pl-6" : "pl-5"} ${
				trail.value ? "pr-6" : "pr-5"
			}`;
		if (xl2.value)
			return `py-6 text-2xl ${lead.value ? "pl-12" : "pl-6"} ${
				trail.value ? "pr-12" : "pr-6"
			}`;
		return "p-2";
	});
	const id = computed(() => props.id ?? nanoid());
	const input = ref();
	const focus = () => input.value.focus();
	defineExpose({ focus, input });
</script>
<template>
	<div>
		<label
			:for="id"
			v-if="label || $slots.label"
			:class="xs ? 'text-xs' : 'text-sm'"
			class="block mb-1 font-medium text-gray-900 dark:text-gray-300">
			<slot name="label">{{ label }}</slot>
		</label>

		<div
			v-if="$slots.trail || $slots.lead"
			class="relative rounded-md shadow-sm">
			<div
				v-if="$slots.lead"
				class="absolute inset-y-0 left-0 pl-1.5 flex items-center pointer-events-none">
				<slot name="lead" />
			</div>
			<input
				:id="id"
				:value="modelValue"
				:disabled="disabled"
				:readonly="readonly"
				:autocomplete="autocomplete"
				:required="required"
				:autofocus="autofocus"
				ref="input"
				@input="$emit('update:modelValue', $event.target.value)"
				@change="$emit('changed', $event)"
				@blur="$emit('unfocused', $event)"
				@focus="$emit('focused', $event)"
				@keyup="$emit('onKeyUp', $event)"
				:type="type ? type : hide ? 'password' : 'text'"
				class="border block w-full focus:outline-none focus:ring-1 appearance-none transition-colors duration-300 disabled:dark:bg-gray-750"
				:class="[
					{ 'cursor-pointer': readonly },
					error
						? 'bg-red-50 border-red-500  text-red-900 placeholder-red-700 rounded-md focus:ring-red-500 focus:border-red-500  dark:bg-red-100 dark:border-red-400'
						: 'bg-white border-gray-300 text-gray-900  rounded-md focus:ring-amber-500 focus:border-amber-500 dark:bg-gray-900 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white',
					classes,
					...(Array.isArray(inputClasses)
						? inputClasses
						: [inputClasses]),
				]"
				:placeholder="placeholder" />
			<div
				v-if="error"
				class="absolute inset-y-0 right-0 pr-3 flex items-center">
				<ExclamationCircleIcon
					class="h-5 w-5 text-red-500"
					aria-hidden="true" />
				<slot name="trail" />
			</div>
			<div
				v-else-if="$slots.trail"
				class="absolute inset-y-0 right-0 pr-3 flex items-center">
				<slot name="trail" />
			</div>
		</div>
		<input
			v-else
			:id="id"
			name="code"
			:disabled="disabled"
			:autocomplete="autocomplete"
			:required="required"
			:autofocus="autofocus"
			:value="modelValue"
			ref="input"
			@input="$emit('update:modelValue', $event.target.value)"
			class="appearance-none"
			:class="[
				error
					? 'bg-red-50 border-red-500 text-red-900 placeholder-red-700 rounded-md focus:ring-red-500 focus:border-red-500  dark:bg-red-100 dark:border-red-400'
					: 'bg-white border-gray-300 text-gray-900  rounded-md focus:ring-amber-500 focus:border-amber-500 dark:bg-gray-900 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white',
				'border block w-full focus:outline-none  focus:ring-1 appearance-none disabled:dark:bg-gray-750',
				classes,
				inputClasses,
			]"
			:type="type ? type : hide ? 'password' : 'text'"
			:placeholder="placeholder" />
		<p v-if="error" class="mt-2 text-sm !text-red-600 dark:!text-red-400">
			<template
				v-if="typeof error === 'string' || error instanceof String">
				{{ error }}
			</template>
			<template v-else-if="Array.isArray(error)">
				<ul class="list-disc">
					<li v-for="err in error" :key="err">
						{{ err }}
					</li>
				</ul>
			</template>
		</p>
		<p
			v-else-if="help"
			class="mt-1 text-sm text-gray-600 dark:text-gray-300"
			id="email-error">
			{{ help }}
		</p>
	</div>
</template>


================================================
File: resources/js/Components/FormLabel.vue
================================================
<script setup>
	defineProps({
		value: String,
	});
</script>

<template>
	<label class="block font-medium text-sm text-gray-700 dark:text-gray-300">
		<template v-if="value">{{ value }}</template>
		<template v-else><slot /></template>
	</label>
</template>


================================================
File: resources/js/Components/FormSwitch.vue
================================================
<script setup>
	import { computed, defineEmits } from "vue";
	const props = defineProps({
		modelValue: { type: [Array, Boolean] },
		disabled: { type: Boolean, default: false },
	});
	const emit = defineEmits(["update:modelValue"]);
	const model = computed({
		get() {
			return props.modelValue;
		},
		set(value) {
			emit("update:modelValue", value);
		},
	});
</script>
<template>
	<label :disabled="disabled" class="inline-flex items-center space-x-2">
		<input
			class="crud-switch h-5 w-10 rounded-full bg-gray-300 before:rounded-full before:bg-gray-50 checked:!bg-emerald-500 checked:before:bg-white dark:bg-navy-900 dark:before:bg-navy-300 dark:checked:before:bg-white"
			type="checkbox"
			v-model="model"
			:disabled="disabled" />
		<span
			class="text-sm font-medium cursor-pointer text-gray-900 dark:text-gray-300">
			<slot />
		</span>
	</label>
</template>
<style>
	.crud-switch,
	.crud-switch::before {
		@apply transition-all duration-200 ease-in-out;
	}

	.crud-switch {
		@apply relative shrink-0 cursor-pointer select-none appearance-none overflow-hidden outline-none
   focus:outline-none;
		print-color-adjust: exact;
	}

	.crud-switch {
		@apply [--thumb-border:2px] before:absolute focus-visible:ring
  before:top-[var(--thumb-border)] before:left-[var(--thumb-border)]
  before:h-[calc(100%-var(--thumb-border)*2)] 
  before:w-[calc((100%/2)-(var(--thumb-border)*2))]
  checked:before:translate-x-[calc(100%+(var(--thumb-border)*2))];
