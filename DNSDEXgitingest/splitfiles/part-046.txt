================================================
File: resources/js/Components/Multiselect/Multiselect.vue
================================================
<script>
	/* istanbul ignore file */

	import useA11y from "./composables/useA11y";
	import useClasses from "./composables/useClasses";
	import useData from "./composables/useData";
	import useDropdown from "./composables/useDropdown";
	import useI18n from "./composables/useI18n";
	import useKeyboard from "./composables/useKeyboard";
	import useMultiselect from "./composables/useMultiselect";
	import useOptions from "./composables/useOptions";
	import usePointer from "./composables/usePointer";
	import usePointerAction from "./composables/usePointerAction";
	import useScroll from "./composables/useScroll";
	import useSearch from "./composables/useSearch";
	import useValue from "./composables/useValue";
	import resolveDeps from "./utils/resolveDeps";

	export default {
		emits: [
			"paste",
			"open",
			"close",
			"select",
			"deselect",
			"input",
			"search-change",
			"tag",
			"option",
			"update:modelValue",
			"change",
			"clear",
			"keydown",
			"keyup",
			"max",
			"create",
		],
		props: {
			value: {
				required: false,
			},
			modelValue: {
				required: false,
			},
			options: {
				type: [Array, Object, Function],
				required: false,
				default: () => [],
			},
			id: {
				type: [String, Number],
				required: false,
			},
			name: {
				type: [String, Number],
				required: false,
				default: "multiselect",
			},
			disabled: {
				type: Boolean,
				required: false,
				default: false,
			},
			label: {
				type: String,
				required: false,
				default: "label",
			},
			trackBy: {
				type: String,
				required: false,
				default: undefined,
			},
			valueProp: {
				type: String,
				required: false,
				default: "value",
			},
			placeholder: {
				type: String,
				required: false,
				default: null,
			},
			mode: {
				type: String,
				required: false,
				default: "single", // single|multiple|tags
			},
			searchable: {
				type: Boolean,
				required: false,
				default: false,
			},
			limit: {
				type: Number,
				required: false,
				default: -1,
			},
			hideSelected: {
				type: Boolean,
				required: false,
				default: true,
			},
			createTag: {
				type: Boolean,
				required: false,
				default: undefined,
			},
			createOption: {
				type: Boolean,
				required: false,
				default: undefined,
			},
			appendNewTag: {
				type: Boolean,
				required: false,
				default: undefined,
			},
			appendNewOption: {
				type: Boolean,
				required: false,
				default: undefined,
			},
			addTagOn: {
				type: Array,
				required: false,
				default: undefined,
			},
			addOptionOn: {
				type: Array,
				required: false,
				default: undefined,
			},
			caret: {
				type: Boolean,
				required: false,
				default: true,
			},
			loading: {
				type: Boolean,
				required: false,
				default: false,
			},
			noOptionsText: {
				type: [String, Object],
				required: false,
				default: "The list is empty",
			},
			noResultsText: {
				type: [String, Object],
				required: false,
				default: "No results found",
			},
			multipleLabel: {
				type: Function,
				required: false,
			},
			object: {
				type: Boolean,
				required: false,
				default: false,
			},
			delay: {
				type: Number,
				required: false,
				default: -1,
			},
			minChars: {
				type: Number,
				required: false,
				default: 0,
			},
			resolveOnLoad: {
				type: Boolean,
				required: false,
				default: true,
			},
			filterResults: {
				type: Boolean,
				required: false,
				default: true,
			},
			clearOnSearch: {
				type: Boolean,
				required: false,
				default: false,
			},
			clearOnSelect: {
				type: Boolean,
				required: false,
				default: true,
			},
			canDeselect: {
				type: Boolean,
				required: false,
				default: true,
			},
			canClear: {
				type: Boolean,
				required: false,
				default: true,
			},
			max: {
				type: Number,
				required: false,
				default: -1,
			},
			showOptions: {
				type: Boolean,
				required: false,
				default: true,
			},
			required: {
				type: Boolean,
				required: false,
				default: false,
			},
			openDirection: {
				type: String,
				required: false,
				default: "bottom",
			},
			nativeSupport: {
				type: Boolean,
				required: false,
				default: false,
			},
			classes: {
				type: Object,
				required: false,
				default: () => ({}),
			},
			strict: {
				type: Boolean,
				required: false,
				default: true,
			},
			closeOnSelect: {
				type: Boolean,
				required: false,
				default: true,
			},
			closeOnDeselect: {
				type: Boolean,
				required: false,
				default: false,
			},
			autocomplete: {
				type: String,
				required: false,
			},
			groups: {
				type: Boolean,
				required: false,
				default: false,
			},
			groupLabel: {
				type: String,
				required: false,
				default: "label",
			},
			groupOptions: {
				type: String,
				required: false,
				default: "options",
			},
			groupHideEmpty: {
				type: Boolean,
				required: false,
				default: false,
			},
			groupSelect: {
				type: Boolean,
				required: false,
				default: true,
			},
			inputType: {
				type: String,
				required: false,
				default: "text",
			},
			attrs: {
				required: false,
				type: Object,
				default: () => ({}),
			},
			onCreate: {
				required: false,
				type: Function,
			},
			disabledProp: {
				type: String,
				required: false,
				default: "disabled",
			},
			searchStart: {
				type: Boolean,
				required: false,
				default: false,
			},
			reverse: {
				type: Boolean,
				required: false,
				default: false,
			},
			regex: {
				type: [Object, String, RegExp],
				required: false,
				default: undefined,
			},
			rtl: {
				type: Boolean,
				required: false,
				default: false,
			},
			infinite: {
				type: Boolean,
				required: false,
				default: false,
			},
			aria: {
				required: false,
				type: Object,
				default: () => ({}),
			},
			clearOnBlur: {
				required: false,
				type: Boolean,
				default: true,
			},
			locale: {
				required: false,
				type: String,
				default: null,
			},
			fallbackLocale: {
				required: false,
				type: String,
				default: "en",
			},
			searchFilter: {
				required: false,
				type: Function,
				default: null,
			},
			allowAbsent: {
				required: false,
				type: Boolean,
				default: false,
			},
			detatched: {
				type: Boolean,
				required: false,
				default: false,
			},
			filter: {
				type: Boolean,
				required: false,
				default: false,
			},
		},
		setup(props, context) {
			const data = resolveDeps(props, context, [
				useI18n,
				useValue,
				usePointer,
				useDropdown,
				useSearch,
				useData,
				useMultiselect,
				useOptions,
				useScroll,
				usePointerAction,
				useKeyboard,
				useClasses,
				useA11y,
			]);

			context.expose({
				clear: data.clear,
				resolveOptions: data.resolveOptions,
			});
			return data;
		},
	};
</script>
<template>
	<div
		ref="multiselect"
		:class="classList.container"
		:id="searchable ? undefined : id"
		:dir="rtl ? 'rtl' : undefined"
		@focusin="handleFocusIn"
		@focusout="handleFocusOut"
		@keyup="handleKeyup"
		@keydown="handleKeydown">
		<div
			:class="classList.wrapper"
			@mousedown="handleMousedown"
			ref="wrapper"
			:tabindex="tabindex"
			:aria-controls="!searchable ? ariaControls : undefined"
			:aria-placeholder="!searchable ? ariaPlaceholder : undefined"
			:aria-expanded="!searchable ? isOpen : undefined"
			:aria-activedescendant="
				!searchable ? ariaActiveDescendant : undefined
			"
			:aria-multiselectable="
				!searchable ? ariaMultiselectable : undefined
			"
			:role="!searchable ? 'combobox' : undefined"
			v-bind="!searchable ? arias : {}">
			<!-- Search -->
			<template v-if="mode !== 'tags' && searchable && !disabled">
				<input
					:type="inputType"
					:modelValue="search"
					:value="search"
					:class="classList.search"
					:autocomplete="autocomplete"
					:id="searchable ? id : undefined"
					@input="handleSearchInput"
					@keypress="handleKeypress"
					@paste.stop="handlePaste"
					ref="input"
					:aria-controls="ariaControls"
					:aria-placeholder="ariaPlaceholder"
					:aria-expanded="isOpen"
					:aria-activedescendant="ariaActiveDescendant"
					:aria-multiselectable="ariaMultiselectable"
					role="combobox"
					v-bind="{
						...attrs,
						...arias,
					}" />
			</template>

			<!-- Tags (with search) -->
			<template v-if="mode == 'tags'">
				<div :class="classList.tags" data-tags>
					<slot
						v-for="(option, i, key) in iv"
						name="tag"
						:option="option"
						:handleTagRemove="handleTagRemove"
						:disabled="disabled"
						:classList="classList"
						:ariaTagLabel="ariaTagLabel"
						:localize="localize">
						<span
							:class="[
								classList.tag,
								option.disabled ? classList.tagDisabled : null,
							]"
							tabindex="-1"
							@keyup.enter="handleTagRemove(option, $event)"
							:key="key"
							:aria-label="ariaTagLabel(localize(option[label]))">
							{{ localize(option[label]) }}
							<span
								v-if="!disabled && !option.disabled"
								:class="classList.tagRemove"
								@click.stop="handleTagRemove(option, $event)">
								<span :class="classList.tagRemoveIcon"></span>
							</span>
						</span>
					</slot>

					<div :class="classList.tagsSearchWrapper" ref="tags">
						<!-- Used for measuring search width -->
						<span :class="classList.tagsSearchCopy">
							{{ search }}
						</span>

						<!-- Actual search input -->
						<input
							v-if="searchable && !disabled"
							:type="inputType"
							:modelValue="search"
							:value="search"
							:class="classList.tagsSearch"
							:id="searchable ? id : undefined"
							:autocomplete="autocomplete"
							@input="handleSearchInput"
							@keypress="handleKeypress"
							@paste.stop="handlePaste"
							ref="input"
							:aria-controls="ariaControls"
							:aria-placeholder="ariaPlaceholder"
							:aria-expanded="isOpen"
							:aria-activedescendant="ariaActiveDescendant"
							:aria-multiselectable="ariaMultiselectable"
							role="combobox"
							v-bind="{
								...attrs,
								...arias,
							}" />
					</div>
				</div>
			</template>

			<!-- Single label -->
			<template v-if="mode == 'single' && hasSelected && !search && iv">
				<slot name="singlelabel" :value="iv" :classList="classList">
					<div :class="classList.singleLabel">
						<span :class="classList.singleLabelText">
							{{ localize(iv[label]) }}
						</span>
					</div>
				</slot>
			</template>

			<!-- Multiple label -->
			<template v-if="mode == 'multiple' && hasSelected && !search">
				<slot name="multiplelabel" :values="iv">
					<div
						:class="classList.multipleLabel"
						v-html="multipleLabelText"></div>
				</slot>
			</template>
