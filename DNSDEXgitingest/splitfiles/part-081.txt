			type: Number,
			required: true,
		},
		devId: {
			type: Number,
			required: true,
		},
		initialMessages: {
			type: Array,
			default: () => [],
		},
	});

	const messages = ref([...props.initialMessages]);
	const imagePreview = ref(null);
	const uploadPath = ref(null);

	const form = useForm({
		message: "",
		image_path: null,
		image_upload: false,
		launchpad_id: props.launchpadId,
	});

	// Websocket connection
	onMounted(() => {
		window.Echo.channel(`launchpad.${props.launchpadId}`).listen(
			"NewMessage",
			(e) => {
				console.log(e);
				messages.value.push(e.message);
				scrollToBottom();
			},
		);
	});

	const scrollToBottom = () => {
		nextTick(() => {
			const container = document.querySelector(".messages-container");
			if (container) {
				container.scrollTop = container.scrollHeight;
			}
		});
	};

	const submitMessage = () => {
		if (!form.message && !form.image_path) return;

		form.post(window.route("msgs.store"), {
			preserveScroll: true,
			onSuccess: () => {
				form.reset();
				imagePreview.value = null;
				uploadPath.value = null;
			},
		});
	};

	watch(
		messages,
		() => {
			scrollToBottom();
		},
		{ deep: true },
	);
</script>

<template>
	<div class="flex flex-col h-[900px] bg-gray-850 p-4 rounded-lg shadow">
		<!-- Messages Container -->
		<div
			v-if="messages.length == 0"
			class="w-full flex flex-col items-center justify-center h-full">
			<div class="p-8 bg-gray-800 rounded">
				<MessageSquareHeart class="w-16 h-16 stroke-[0.8]" />
				<h3 class="text-xl font-extralight">No chat messages found</h3>
				<h3>Be the first to Leave a message</h3>
			</div>
		</div>
		<div class="overflow-y-auto pb-4 messages-container">
			<div
				v-for="message in messages"
				:key="message.uuid"
				class="mb-4"
				:class="{
					'flex justify-end':
						message.user_id === $page.props.auth.user?.id,
				}">
				<div
					:class="{
						'bg-blue-100 dark:bg-blue-900':
							message.user_id === $page.props.auth.user?.id,
						'bg-gray-100 dark:bg-gray-750':
							message.user_id !== $page.props.auth.user?.id,
					}"
					class="rounded-lg p-3">
					<div class="flex items-start">
						<img
							:src="message.user.profile_photo_url"
							:alt="message.user.name"
							class="w-8 h-8 rounded-full mr-2" />
						<div>
							<div class="text-sm font-semibold mb-1">
								{{
									message.user.name ||
									message.user.address.substring(0, 6)
								}}
								<BaseButton
									v-if="message.user_id === devId"
									class="self-center ml-3 pointer-events-none"
									size="xss"
									outlined>
									DEV
								</BaseButton>
							</div>
							<p class="text-sm">{{ message.message }}</p>
							<img
								v-if="message.image"
								:src="message.image"
								class="mt-2 rounded-lg max-w-full h-auto"
								@click="$emit('image-click', message.image)" />
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- Input Area -->
		<div class="pt-4">
			<form @submit.prevent="submitMessage" class="space-y-4">
				<!-- Image Preview -->
				<div class="flex items-center space-x-4">
					<div class="flex-1">
						<FormInput
							v-model="form.message"
							type="text"
							size="md"
							placeholder="Type your message..."></FormInput>
					</div>

					<BaseButton v-if="$page.props.auth.user">
						<PaperAirplaneIcon class="w-6 h-6" />
					</BaseButton>
					<Web3Auth size="md" v-else />
				</div>
			</form>
		</div>
	</div>
</template>


================================================
File: resources/js/Pages/Launchpads/Create.vue
================================================
<script setup>
	import { computed, ref } from "vue";

	import { useForm } from "@inertiajs/vue3";
	import { useChainId } from "@wagmi/vue";
	import { ComponentIcon } from "lucide-vue-next";
	import { parseEventLogs } from "viem";

	import ChainSymbol from "@/Components/ChainSymbol.vue";
	import CollapseTransition from "@/Components/CollapseTransition.vue";
	import FormInput from "@/Components/FormInput.vue";
	import FormLabel from "@/Components/FormLabel.vue";
	import FormSwitch from "@/Components/FormSwitch.vue";
	import FormTextArea from "@/Components/FormTextArea.vue";
	import Loading from "@/Components/Loading.vue";
	import LogoInput from "@/Components/LogoInput.vue";
	import LogoInputLocal from "@/Components/LogoInputLocal.vue";
	import fakeLogo from "@/Components/no-image-available-icon.jpeg?url";
	import PrimaryButton from "@/Components/PrimaryButton.vue";
	import TxStatus from "@/Components/TxStatus.vue";
	import {
		useContractFees,
		useReactiveContractCall,
	} from "@/hooks/useContractCall";
	import AppLayout from "@/Layouts/AppLayout.vue";
	import Web3Auth from "@/Pages/Auth/Web3Auth.vue";
	const props = defineProps({
		factories: Array,
	});
	const chainId = useChainId();
	const factory = computed(() => props.factories[chainId.value]);
	const factoryId = computed(() => factory.value?.id);
	const form = useForm({
		chainId,
		factory_id: factoryId,
		contract: "",
		token: "",
		name: "",
		symbol: "",
		description: "",
		twitter: "",
		discord: "",
		telegram: "",
		website: "",
		logo_uri: null,
		logo_path: null,
		logo_upload: false,
	});
	const save = () =>
		form.post(window.route("launchpads.store"), {
			preserveState: true,
			preserveScroll: true,
		});
	const addLinks = ref(false);
	const abi = computed(() => factory.value.factory_abi);
	const contract = computed(() => factory.value.contract);
	const state = useReactiveContractCall(abi, contract);
	const { fees, feesFormatted } = useContractFees(
		abi,
		contract,
		"getDeploymentFee",
	);
	const deploy = async () => {
		if (form.logo_upload && !form.logo_path)
			form.setError("logo_uri", "Logo is required");
		if (!form.logo_upload && !form.logo_uri)
			form.setError("logo_uri", "Logo is required");
		if (!form.name) form.setError("name", "Token name is required");
		if (!form.symbol) form.setError("symbol", "Token symbol is required");
		if (!form.symbol) form.setError("symbol", "A description is required");
		await state.call(
			"deployBondingCurveSystem",
			[form.name, form.symbol],
			fees.value,
		);
		if (state.error) return;
		const logs = parseEventLogs({
			abi: abi.value,
			logs: state.receipt.logs,
			eventName: ["BondingCurveSystemDeployed"],
		});
		console.log(logs);
		form.contract = logs?.[0]?.args?.bondingCurveAddress;
		form.token = logs?.[0]?.args?.tokenAddress;
		save();
	};
</script>
<template>
	<Head :title="`New Launchpad`" />
	<AppLayout>
		<div
			class="card max-w-3xl w-full mb-6 mx-auto dark:bg-gray-850 sm:p-12 sm:!pt-6 h-full border-0 card-border">
			<div class="card-body card-gutterless h-full">
				<h3 class="mb-3 flex items-center gap-2">
					<ComponentIcon class="w-7 h-7 stroke-[0.7] text-sky-400" />
					{{ $t("Launch Meme Token") }}
				</h3>
				<div class="grid gap-6">
					<div class="border p-3 border-gray-650 bg-gray-750/50">
						<h3 class="text-lg mb-4 !text-primary font-extralight">
							{{ $t("Token Logo") }}
						</h3>
						<div class="gap-x-3 grid gap-3">
							<FormInput
								v-model="form.logo_uri"
								:disabled="form.logo_upload"
								placeholder="https://"
								:error="form.errors.logo_uri"
								:help="$t('Supports png, jpeg or svg')">
								<template #label>
									<div class="flex mb-3">
										<span class="mr-3">
											{{ $t("Logo") }}
										</span>
										<label
											class="inline-flex items-center space-x-2">
											<input
												v-model="form.logo_upload"
												class="form-switch h-5 w-10 rounded-full bg-slate-300 before:rounded-full before:bg-slate-50 checked:!bg-emerald-600 checked:before:bg-white dark:bg-navy-900 dark:before:bg-navy-300 dark:checked:before:bg-white"
												type="checkbox" />
											<span>
												{{ $t("Upload to server") }}
											</span>
										</label>
									</div>
								</template>
							</FormInput>
							<template v-if="form.logo_upload">
								<LogoInput
									v-if="$page.props.s3"
									v-model="form.logo_uri"
									v-model:file="form.logo_path"
									auto />
								<LogoInputLocal
									v-else
									v-model="form.logo_uri"
									v-model:file="form.logo_path" />
							</template>
							<img
								v-else
								class="w-12 h-12 my-auto rounded-full b-0"
								:src="form.logo_uri ?? form.logo ?? fakeLogo" />
						</div>
						<p v-if="form.errors.logo" class="text-red-500 mt-2">
							{{ form.errors.logo }}
						</p>
						<p v-else class="text-xs mt-2">
							{{ $t("") }}
						</p>
					</div>
					<FormInput
						:label="$t('Name')"
						v-model="form.name"
						type="text"
						:error="form.errors.name" />

					<FormInput
						:label="$t('Symbol')"
						v-model="form.symbol"
						type="text"
						:error="form.errors.symbol" />
					<div>
						<FormLabel class="mb-2">
							{{ $t("Description") }}
						</FormLabel>
						<FormTextArea :rows="3" v-model="form.description" />
						<p
							v-if="form.errors.description"
							class="text-xs font-semibold text-red-500">
							{{ form.errors.description }}
						</p>
					</div>
					<FormSwitch v-model="addLinks">
						{{ $t("Add Project Links") }}
					</FormSwitch>
					<CollapseTransition>
						<div v-show="addLinks" class="grid gap-4">
							<FormInput
								:label="$t('Website')"
								v-model="form.website"
								type="text"
								:error="form.errors.website" />
							<FormInput
								:label="$t('Twitter')"
								v-model="form.twitter"
								type="text"
								:error="form.errors.twitter" />
							<FormInput
								:label="$t('Discord')"
								v-model="form.discord"
								type="text"
								:error="form.errors.discord" />
							<FormInput
								:label="$t('Telegram')"
								v-model="form.telegram"
								type="text"
								:error="form.errors.telegram" />
						</div>
					</CollapseTransition>

					<div v-if="$page.props.auth.user" class="pt-5">
						<div
							class="flex flex-col sm:flex-row items-center gap-3 justify-end">
							<TxStatus
								class="w-full sm:w-[unset]"
								:state="state" />
							<PrimaryButton
								class="w-full sm:w-[unset]"
								@click="deploy"
								:disabled="state.busy || form.processing">
								<Loading
									class="mr-2 -ml-1 inline-block w-5 h-5"
									v-if="state.busy || form.processing" />
								<span>
									{{ $t("Deploy Launchpad") }}
									{{ feesFormatted }}
								</span>
								<ChainSymbol class="ml-1" :chain-id="chainId" />
							</PrimaryButton>
						</div>
					</div>
					<div v-else class="pt-5">
						<div
							class="flex flex-col sm:flex-row items-center gap-3 justify-end">
							<Web3Auth />
						</div>
					</div>
				</div>
			</div>
		</div>
	</AppLayout>
</template>


================================================
File: resources/js/Pages/Launchpads/IndexCard.vue
================================================
<!-- LaunchpadCard.vue -->
<script setup>
import { Link } from "@inertiajs/vue3";
import { Globe2, Send } from "lucide-vue-next";
import { DiscordIcon, XIcon } from "vue3-simple-icons";

import BaseButton from "@/Components/BaseButton.vue";
import { useBillions } from "@/hooks";
import NetworkIcon from "@/Icons/NetworkIcon.vue";

defineProps({
    launchpad: {
        type: Object,
        required: true,
    },
});

const formatVolume = (value) => {
    return `$${value}`;
};
</script>

<template>
    <Link :href="route('launchpads.show', { launchpad: launchpad.contract })">
    <div class="bg-gray-850 hover:bg-gray-800 rounded border border-gray-700 p-4 relative">
        <!-- Bonding Curve Type Banner -->
        <div
            v-if="launchpad.status"
            :class="launchpad.isFinalized
                    ? 'bg-red-500 text-white '
                    : launchpad.status == 'Prebond'
                        ? 'border border-gray-700 bg-gray-900 text-primary'
                        : 'bg-primary text-black '
                "
            class="absolute -top-3 left-1/2 -translate-x-1/2 uppercase text-center right-0 px-3 py-0.5 rounded-full text-xs font-medium"
        >
            {{ launchpad.status }}
        </div>
        <div class="text-white absolute right-2 top-2">
            <NetworkIcon
                class="w-5 h-5"
                :chainId="launchpad.chainId"
            />
        </div>
        <div class="grid">
            <!-- Token Image -->
            <div class="flex items-start gap-4 mb-1">
                <div class="relative">
                    <img
                        :src="launchpad.logo"
                        :alt="launchpad.name"
                        class="w-12 h-12 rounded"
                    />
                    <span class="absolute top-0 right-0 bg-black bg-opacity-50 text-white text-xs px-1 rounded">
                        {{ launchpad.percentage }}%
                    </span>
                </div>
                <div>
                    <h3 class="text-white text-lg font-semibold">
                        {{ launchpad.name }} ({{ launchpad.symbol }})
                    </h3>
                    <div class="flex z-10 items-center gap-2">
                        <p>{{ launchpad.createdAgo }}</p>
                        <BaseButton
                            iconMode
                            outlined
                            secondary
                            size="xss"
                        >
                            <XIcon class="w-3 h-3" />
                        </BaseButton>
                        <BaseButton
                            iconMode
                            outlined
                            secondary
                            size="xss"
                        >
                            <Send class="w-3 h-3" />
                        </BaseButton>
                        <BaseButton
                            iconMode
                            outlined
                            secondary
                            size="xss"
                        >
                            <Globe2 class="w-3 h-3" />
                        </BaseButton>
                        <BaseButton
                            iconMode
                            outlined
                            secondary
                            size="xss"
                        >
                            <DiscordIcon class="w-3 h-3" />
                        </BaseButton>
                    </div>
                </div>
            </div>
            <!-- Token Info -->
            <div class="flex-1">
                <div class="flex items-center justify-between">
                    <div class="h-14">
                        <p
                            v-if="launchpad.description"
                            class="text-gray-400 line-clamp-3 text-sm mt-1"
                        >
                            {{ launchpad.description }}
                        </p>
                    </div>
                </div>
                <!-- Stats -->
                <div class="mt-4">
                    <div class="flex items-center justify-between mb-2">
                        <div class="flex items-center space-x-2">
                            <span class="text-primary text-lg">
                                {{ launchpad.percentage }}%
                            </span>
                            <span class="text-white">
                                MCap ${{ useBillions(launchpad.marketCap) }}
                            </span>
                        </div>
                        <div class="flex items-center text-gray-400 text-sm space-x-2">
                            <span>{{ launchpad.trades_count }} txns</span>
                            <span>/</span>
                            <span>
                                {{ formatVolume(launchpad.volume24h) }} 24h
                                vol
                            </span>
                        </div>
                    </div>
                    <!-- Progress Bar -->
                    <div class="w-full bg-gray-700 rounded-full h-1.5">
                        <div
