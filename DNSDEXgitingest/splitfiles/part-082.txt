                            class="h-full rounded-full bg-gradient-to-r to-emerald-500 from-primary"
                            :style="{
                                width: `${Math.min(
                                    launchpad.percentage,
                                    100,
                                )}%`,
                            }"
                        ></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </Link>
</template>


================================================
File: resources/js/Pages/Launchpads/RecentTrade.vue
================================================
<script setup>
import { Link } from "@inertiajs/vue3";
import { ArrowRightToLine } from "lucide-vue-next";

import ChainSymbol from "@/Components/ChainSymbol.vue";
import { useBillions } from "@/hooks";
import { shortenAddress } from "@/lib/wagmi";

defineProps({
    trade: Object,
});
</script>
<template>
    <Link
        class="px-2 text-white"
        v-if="trade?.contract"
        :href="route('launchpads.show', { launchpad: trade?.contract })"
    >
    <div class="bg-gray-800 border border-gray-700 hover:bg-gray-750 p-4 rounded">
        <div class="flex items-center justify-between rounded transition-colors duration-200">
            <span
                v-if="trade.type == 'sell'"
                class="text-red-300 rounded text-xs uppercase border px-3 py-1 border-red-500 bg-red-500/10 font-bold"
            >
                # SELL
            </span>
            <span
                v-if="trade.type == 'buy'"
                class="text-emerald-300 rounded text-xs uppercase border px-3 py-1 border-emerald-500 bg-emerald-500/10 font-bold"
            >
                # BUY
            </span>
            <span
                v-if="trade.type == 'prebond'"
                class="text-gray-300 rounded text-xs uppercase border px-3 py-1 border-gray-500 bg-gray-500/10 font-bold"
            >
                BOND
            </span>
            <div class="flex items-center gap-2">
                <img
                    :alt="trade.name"
                    class="block w-6 h-6 rounded-full"
                    :src="trade.logo"
                    loading="lazy"
                />
                <span
                    class="box-border f text-sm font-semibold break-words max-w-32 overflow-hidden text-ellipsis whitespace-nowrap"
                >
                    {{ useBillions(trade.qty) }} {{ trade.symbol }}
                </span>
                <ArrowRightToLine class="w-5 h-5 ml-2" />
                <div class="flex items-center text-sm font-semibold text-[#f0b90b]">
                    {{ parseFloat(trade.amount).toFixed(4) * 1 }}
                    <ChainSymbol :chain-id="trade.chainId" />
                </div>
                <div class="flex items-center text-sm font-semibold text-[#f0b90b]">
                    (~${{ useBillions(trade.usd) }})
                </div>
            </div>
        </div>
        <div class="flex mt-1 items-center justify-between">
            <div>{{ shortenAddress(trade.address, 10) }}</div>
            <div class="text-xs px-1.5 py-0.5 text-gray-400 border rounded-full border-gray-600">
                {{ trade.date }}
            </div>
        </div>
    </div>
    </Link>
</template>


================================================
File: resources/js/Pages/Launchpads/Show.vue
================================================
<script setup>
import { ref } from "vue";

import { MessageSquare, TvMinimalPlay, UsersRound } from "lucide-vue-next";
import { RiExchangeLine } from "oh-vue-icons/icons";

import BaseButton from "@/Components/BaseButton.vue";
import VueIcon from "@/Components/VueIcon.vue";
import AppLayout from "@/Layouts/AppLayout.vue";
import BarButton from "@/Pages/Launchpads/BarButton.vue";
import Chat from "@/Pages/Launchpads/Chat.vue";
import BuyCard from "@/Pages/Launchpads/TradingView/BuyCard.vue";
import DevStream from "@/Pages/Launchpads/TradingView/DevStream.vue";
import Holders from "@/Pages/Launchpads/TradingView/Holders.vue";
import Info from "@/Pages/Launchpads/TradingView/Info.vue";
import LockCard from "@/Pages/Launchpads/TradingView/LockCard.vue";
import Trades from "@/Pages/Launchpads/TradingView/Trades.vue";
import TradingViewChart from "@/Pages/Launchpads/TradingView/TradingViewChart.vue";

defineProps({
    launchpad: Object,
    top: Array,
    stats: Object,
    rate: Object,
    poolstats: Object,
});

const tabs = [
    { name: "Chat", icon: MessageSquare },
    { name: "Trades", icon: RiExchangeLine, vueicon: true },
    { name: "Holders", icon: UsersRound },
    { name: "Dev Stream", icon: TvMinimalPlay },
];
const activeTab = ref("Chat");
</script>
<template>
    <AppLayout compact>
        <template #header>
            <div class="flex items-center w-full bg-gray-850 h-12 relative overflow-x-hidden">
                <div class="flex w-full items-center overflow-x-auto [scrollbar-width:none]">
                    <div class="flex w-full items-center">
                        <BarButton
                            v-for="launch in top"
                            :key="launch.id"
                            :launch="launch"
                            :active="launch.id === launchpad.id"
                        />
                    </div>
                </div>
                <div
                    class="h-12 w-20 absolute right-0 pointer-events-none bg-gradient-to-r from-transparent via-gray-850/50 to-gray-850">
                </div>
            </div>
        </template>
        <div class="flex flex-col items-center md:items-start md:flex-row gap-8 mt-4 md:justify-center">
            <div class="flex flex-col gap-2 w-full px-4 md:px-0 md:w-2/3">
                <div class="h-4/8">
                    <TradingViewChart :launchpad="launchpad" />
                </div>
                <div class="flex gap-2 h-fit mt-6">
                    <BaseButton
                        v-for="tab in tabs"
                        :key="tab.name"
                        :outlined="tab.name != activeTab"
                        @click="activeTab = tab.name"
                        size="xs"
                    >
                        <VueIcon
                            :icon="RiExchangeLine"
                            v-if="tab.vueicon"
                            class="w-4 h-4 mr-1 -ml-1 inline-flex"
                        />
                        <component
                            v-else
                            class="w-4 h-4 mr-1 -ml-1 inline-flex"
                            :is="tab.icon"
                        />

                        {{ tab.name }}
                    </BaseButton>
                </div>

                <div class="text-gray-300 mt-4 grid gap-1 relative h-full mb-8">
                    <Chat
                        v-if="activeTab == 'Chat'"
                        :launchpadId="launchpad.id"
                        :devId="launchpad.user_id"
                        :initial-messages="$page.props.msgs"
                        class="md:w-full"
                    />
                    <Trades
                        :trades="$page.props.trades"
                        :chainId="launchpad.chainId"
                        :bcurve="launchpad.contract"
                        v-if="activeTab == 'Trades'"
                    />
                    <Holders
                        :holders="$page.props.holders"
                        :chainId="launchpad.chainId"
                        :launchpad="launchpad"
                        :usdRate="rate.usd_rate"
                        v-if="activeTab == 'Holders'"
                    />
                    <DevStream
                        :launchpad="launchpad"
                        v-if="activeTab == 'Dev Stream'"
                    />
                </div>
            </div>
            <div class="grid mb-12 gap-4 w-full px-4 h-fit md:w-fit md:mx-auto md:px-3">
                <BuyCard :launchpad="launchpad" />
                <LockCard
                    v-if="launchpad.isOwner"
                    :launchpad="launchpad"
                />
                <Info
                    :rank="stats.rank"
                    :rate="rate"
                    :totalVolume="stats.totalVolume"
                    :totalLaunchpads="stats.totalLaunchpads"
                    :launchpad="launchpad"
                />
            </div>
        </div>
    </AppLayout>
</template>


================================================
File: resources/js/Pages/Launchpads/TradingView/ArrowLeftRight.vue
================================================
<template>
	<svg
		stroke="currentColor"
		fill="currentColor"
		stroke-width="0"
		viewBox="0 0 1024 1024"
		focusable="false"
		aria-hidden="true"
		xmlns="http://www.w3.org/2000/svg">
		<path
			d="M847.9 592H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h605.2L612.9 851c-4.1 5.2-.4 13 6.3 13h72.5c4.9 0 9.5-2.2 12.6-6.1l168.8-214.1c16.5-21 1.6-51.8-25.2-51.8zM872 356H266.8l144.3-183c4.1-5.2.4-13-6.3-13h-72.5c-4.9 0-9.5 2.2-12.6 6.1L150.9 380.2c-16.5 21-1.6 51.8 25.1 51.8h696c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z"></path>
	</svg>
</template>


================================================
File: resources/js/Pages/Launchpads/TradingView/BuyCard.vue
================================================
<script setup>
	import { computed, reactive, ref, watch } from "vue";

	import { useForm } from "@inertiajs/vue3";
	import { useAccount } from "@wagmi/vue";
	import { CheckCircle, Cog, Vault, X } from "lucide-vue-next";
	import { formatEther, parseEther, parseEventLogs } from "viem";

	import ApproveTokenButton from "@/Components/ApproveTokenButton.vue";
	import BaseButton from "@/Components/BaseButton.vue";
	import ChainSymbol from "@/Components/ChainSymbol.vue";
	import FormInput from "@/Components/FormInput.vue";
	import TxStatus from "@/Components/TxStatus.vue";
	import { ethAmount, tokenAmount } from "@/hooks/swapMath";
	import {
		useLaunchpadInfo,
		useReactiveContractCall,
	} from "@/hooks/useContractCall";
	import NetworkIcon from "@/Icons/NetworkIcon.vue";
	import ArrowLeftRight from "@/Pages/Launchpads/TradingView/ArrowLeftRight.vue";

	const slippage = ref(false);
	const props = defineProps({
		launchpad: Object,
	});
	const tradeType = ref("buy");
	const info = useLaunchpadInfo(props.launchpad);
	const state = useReactiveContractCall(
		props.launchpad.factory.abi,
		props.launchpad.contract,
	);
	const useTokenInput = ref(false);
	const slippagePercent = ref(5);
	const amount = ref(0.1);
	const tokens = ref(0);
	const swapInfo = reactive({
		expectedOutputAmount: 0, // ETH formatted string
		minimumOutputAmount: 0, // ETH formatted string
		expectedOutputAmountWei: 0, // Wei as string
		minimumOutputAmountWei: 0, // Wei as string
		priceImpact: "0%",
	});

	const ethReserve = computed(() =>
		info.currentPhase === 0 ? info.virtualEth : info.ethReserve,
	);
	const tokenReserve = computed(() =>
		info.currentPhase === 0 ? info.tokenBalance : info.tokenReserve,
	);
	watch(
		[amount, ethReserve, tokenReserve, slippagePercent],
		([ethAmount, ethReserve, tokenReserve, slippagePercent]) => {
			if (useTokenInput.value) return;
			if (parseFloat(ethAmount) === 0) {
				tokens.value = "0";
				return;
			}

			const response = tokenAmount(
				ethReserve,
				tokenReserve,
				`${ethAmount}`,
				slippagePercent,
			);
			tokens.value = response.expectedOutputAmount;
			swapInfo.expectedOutputAmount = response.expectedOutputAmount;
			swapInfo.expectedOutputAmountWei = response.expectedOutputAmountWei;
			swapInfo.minimumOutputAmount = response.minimumOutputAmount;
			swapInfo.minimumOutputAmountWei = response.minimumOutputAmountWei;
			swapInfo.priceImpact = response.priceImpact;
		},
	);

	watch(
		[tokens, ethReserve, tokenReserve, slippagePercent],
		([tokenAmount, ethReserve, tokenReserve, slippagePercent]) => {
			if (!useTokenInput.value) return;
			const response = ethAmount(
				ethReserve,
				tokenReserve,
				`${tokenAmount}`,
				slippagePercent,
			);
			amount.value = response.expectedOutputAmount;
			swapInfo.expectedOutputAmount = response.expectedOutputAmount;
			swapInfo.expectedOutputAmountWei = response.expectedOutputAmountWei;
			swapInfo.minimumOutputAmount = response.minimumOutputAmount;
			swapInfo.minimumOutputAmountWei = response.minimumOutputAmountWei;
			swapInfo.priceImpact = response.priceImpact;
		},
	);
	const { address } = useAccount();
	const tradeForm = useForm({
		launchpad_id: props.launchpad.id,
		address: address.value,
		qty: tokens.value,
		amount: amount.value,
		txid: null,
		type: info.currentPhase === 0 ? "prebond" : tradeType.value,
	});
	const setType = (type) => {
		tradeType.value = type;
		useTokenInput.value = type === "sell";
	};
	const saveTx = (txhash) => {
		tradeForm.txid = txhash;
		tradeForm.qty = tokens.value;
		tradeForm.amount = amount.value;
		tradeForm.type = info.currentPhase === 0 ? "prebond" : tradeType.value;
		tradeForm.post(window.route("trades.store"), {
			preserveState: true,
			preserveScroll: true,
		});
	};
	const updatePrebondLog = () => {
		const logs = parseEventLogs({
			abi: props.launchpad.factory.abi,
			logs: state.receipt.logs,
			eventName: ["PreBondingContribution"],
		});
		tradeForm.txid = state.txhash;
		tradeForm.type = info.currentPhase === 0 ? "prebond" : tradeType.value;
		tradeForm.qty = formatEther(logs?.[0]?.args?.tokenAmount);
		tradeForm.amount = formatEther(logs?.[0]?.args?.amount);
		tradeForm.address = logs?.[0]?.args?.contributor;
		tradeForm.post(window.route("trades.store"), {
			preserveState: true,
			preserveScroll: true,
		});
	};
	const updateBuyLog = () => {
		const logs = parseEventLogs({
			abi: props.launchpad.factory.abi,
			logs: state.receipt.logs,
			eventName: ["TokensPurchased"],
		});
		tradeForm.txid = state.txhash;
		tradeForm.type = info.currentPhase === 0 ? "prebond" : tradeType.value;
		console.log(logs);
		tradeForm.qty = formatEther(logs?.[0]?.args?.tokenAmount);
		tradeForm.amount = formatEther(logs?.[0]?.args?.ethAmount);
		tradeForm.address = logs?.[0]?.args?.buyer;
		tradeForm.post(window.route("trades.store"), {
			preserveState: true,
			preserveScroll: true,
		});
	};
	const updateSellLog = () => {
		const logs = parseEventLogs({
			abi: props.launchpad.factory.abi,
			logs: state.receipt.logs,
			eventName: ["TokensSold"],
		});
		tradeForm.txid = state.txhash;
		tradeForm.qty = formatEther(logs?.[0]?.args?.tokenAmount);
		tradeForm.amount = formatEther(logs?.[0]?.args?.ethAmount);
		tradeForm.address = logs?.[0]?.args?.seller;
		tradeForm.post(window.route("trades.store"), {
			preserveState: true,
			preserveScroll: true,
		});
	};

	const swap = async () => {
		let method, args, amt, evt;
		if (info.currentPhase === 0) {
			method = "contributePreBonding";
			evt = updatePrebondLog;
			amt = parseEther(`${amount.value}`);
			args = [];
		}
		if (info.currentPhase === 1) {
			if (tradeType.value === "buy") {
				method = "buyTokens";
				amt = parseEther(`${amount.value}`);
				evt = updateBuyLog;
				const info = tokenAmount(
					ethReserve.value,
					tokenReserve.value,
					`${amount.value}`,
					slippagePercent.value,
				);
				console.log(info);
				args = [info.minimumOutputAmountWei];
			}
			if (tradeType.value === "sell") {
				method = "sellTokens";
				const qty = parseEther(`${tokens.value}`);
				amt = 0;
				evt = updateSellLog;
				const info = ethAmount(
					ethReserve.value,
					tokenReserve.value,
					`${tokens.value}`,
					slippagePercent.value,
				);
				args = [qty, info.minimumOutputAmountWei];
			}
		}
		if (info.currentPhase === 2) {
			// liquidity added
			return;
		}
		await state.call(method, args, amt, saveTx);
		if (state.error) return;
		evt();
		info.updateInfo();
	};

	const withdrawPrebond = async () => {
		await state.call("withdrawTokenAllocation", [address.value], 0, null);
		info.updateInfo();
	};
	const finalizeForm = useForm({
		pool: null,
	});
	const finalizeCurve = async () => {
		await state.call("finalizeCurve", []);
		await info.updateInfo();
		finalizeForm.pool = info.uniswapPool;
		finalizeForm.put(
			window.route("launchpads.finalize", {
				launchpad: props.launchpad.id,
			}),
			{ preserveScroll: true, preserveState: true },
		);
	};

	const maxPrebond = computed(() => {
		const max = info.preBondingTarget - info.totalPreBondingContributions;
		if (amount.value > max) return max;
		return null;
	});
</script>

<template>
	<div class="w-full grid gap-4">
		<div
			v-if="info.currentPhase < 2"
			class="bg-gray-800 p-4 rounded-lg border border-none text-gray-400 grid gap-4">
			<div class="grid grid-cols-2 gap-2 mb-2">
				<BaseButton
					@click="setType('buy')"
					size="xs"
					:secondary="tradeType != 'buy'">
					{{ $t("BUY") }}
				</BaseButton>
				<BaseButton
					@click="setType('sell')"
					v-if="info.currentPhase == 1"
					size="xs"
					:danger="tradeType == 'sell'"
					:secondary="tradeType != 'sell'">
					{{ $t("SELL") }}
				</BaseButton>
				<h3
					class="text-xl font-extralight ml-4"
					v-if="info.currentPhase == 0">
					{{ $t("Prebond") }}
				</h3>
			</div>

			<div v-show="!slippage" class="flex flex-col">
				<FormInput
					v-if="useTokenInput"
					size="sm"
					v-model="tokens"
					input-classes="!pl-24">
					<template #lead>
						<div
							v-if="useTokenInput"
							class="flex items-center gap-2 ml-2">
							<img
								class="w-4 h-4 rounded-full"
								:src="launchpad.logo"
								loading="lazy" />
							{{ launchpad.symbol }}
						</div>
						<div v-else class="flex items-center gap-2 ml-2">
							<NetworkIcon
