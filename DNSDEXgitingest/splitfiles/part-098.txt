    });

    // Create computed properties for formatted values
    const formatted = computed(() => ({
        currentPrice: info.currentPrice.toFixed(6),
        priceInUsd: info.priceInUsd.toFixed(6),
        initialPrice: info.initialPrice.toFixed(6),
        initialPriceUsd: info.initialPriceUsd.toFixed(6),
        preBondingProgress: Math.min(100, info.preBondingProgress).toFixed(2),
        bondingProgress: Math.min(100, info.bondingProgress).toFixed(2),
        totalProgress: Math.min(100, info.totalProgress).toFixed(2),
        currentMarketCap: info.currentMarketCap.toLocaleString('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }),
        fullyDilutedMarketCap: info.fullyDilutedMarketCap.toLocaleString('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        })
    }));

    // Watch for chain changes and update data
    watch(chainId, () => {
        if (chainId.value) {
            info.update();
        }
    }, { immediate: true });

    // Update when USD rate changes
    watch(() => get(usdRate), () => {
        info.update();
    }, { immediate: true });

    return {
        info,
        formatted
    };
};

export default usePriceInfo;

================================================
File: resources/js/lib/utils.js
================================================
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}


================================================
File: resources/js/lib/wagmi.js
================================================
/* eslint-disable import/order */
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi';

import {
    arbitrum,
    arbitrumGoerli,
    arbitrumNova,
    arbitrumSepolia,
    avalanche,
    avalancheFuji,
    base,
    baseGoerli,
    baseSepolia,
    blast,
    blastSepolia,
    bsc,
    bscTestnet,
    celo,
    celoAlfajores,
    fantom,
    fantomTestnet,
    gnosis,
    goerli,
    holesky,
    linea,
    lineaGoerli,
    lineaSepolia,
    mainnet,
    mantle,
    mantleSepoliaTestnet,
    mode,
    moonbeam,
    moonriver,
    opBNB,
    opBNBTestnet,
    optimism,
    optimismGoerli,
    optimismSepolia,
    palm,
    palmTestnet,
    polygon,
    polygonAmoy,
    polygonMumbai,
    scroll,
    scrollSepolia,
    sepolia,
    unichainSepolia,
    zetachain,
    zkLinkNovaSepoliaTestnet,
    zksync,
    zksyncSepoliaTestnet,
} from '@reown/appkit/networks';
import { http } from '@wagmi/vue';
import { fallback } from 'viem';
export const networks = [sepolia, arbitrum, bsc, linea, base, blast];
export const projectId = import.meta.env.VITE_PROJECT_ID;
export const projectUrl = import.meta.env.VITE_PROJECT_URL;
export const projectName = import.meta.env.VITE_PROJECT_APP_NAME;
export const ankrTransports = (ANKR_KEY) => ({
    // Ethereum and testnets
    [mainnet.id]: `https://rpc.ankr.com/eth/${ANKR_KEY}`,
    [sepolia.id]: `https://rpc.ankr.com/eth_sepolia/${ANKR_KEY}`,
    [goerli.id]: `https://rpc.ankr.com/eth_goerli/${ANKR_KEY}`,

    // BNB Smart Chain
    [bsc.id]: `https://rpc.ankr.com/bsc/${ANKR_KEY}`,
    [bscTestnet.id]: `https://rpc.ankr.com/bsc_testnet/${ANKR_KEY}`,

    // Polygon
    [polygon.id]: `https://rpc.ankr.com/polygon/${ANKR_KEY}`,
    [polygonMumbai.id]: `https://rpc.ankr.com/polygon_mumbai/${ANKR_KEY}`,

    // Optimism
    [optimism.id]: `https://rpc.ankr.com/optimism/${ANKR_KEY}`,
    [optimismGoerli.id]: `https://rpc.ankr.com/optimism_testnet/${ANKR_KEY}`,

    // Arbitrum
    [arbitrum.id]: `https://rpc.ankr.com/arbitrum/${ANKR_KEY}`,
    [arbitrumGoerli.id]: `https://rpc.ankr.com/arbitrum_goerli/${ANKR_KEY}`,

    // Avalanche
    [avalanche.id]: `https://rpc.ankr.com/avalanche/${ANKR_KEY}`,
    [avalancheFuji.id]: `https://rpc.ankr.com/avalanche_fuji/${ANKR_KEY}`,

    // Fantom
    [fantom.id]: `https://rpc.ankr.com/fantom/${ANKR_KEY}`,
    [fantomTestnet.id]: `https://rpc.ankr.com/fantom_testnet/${ANKR_KEY}`,

    // Gnosis (xDai)
    [gnosis.id]: `https://rpc.ankr.com/gnosis/${ANKR_KEY}`,

    // Base
    [base.id]: `https://rpc.ankr.com/base/${ANKR_KEY}`,
    [baseGoerli.id]: `https://rpc.ankr.com/base_goerli/${ANKR_KEY}`,

    // zkSync
    [zksync.id]: `https://rpc.ankr.com/zksync_era/${ANKR_KEY}`,

    // Celo
    [celo.id]: `https://rpc.ankr.com/celo/${ANKR_KEY}`,

    // Moonbeam ecosystem
    [moonbeam.id]: `https://rpc.ankr.com/moonbeam/${ANKR_KEY}`,
    [moonriver.id]: `https://rpc.ankr.com/moonriver/${ANKR_KEY}`
});

export const infuraTransports = (INFURA_KEY) => ({
    // Ethereum and testnets
    [mainnet.id]: `https://mainnet.infura.io/v3/${INFURA_KEY}`,
    [sepolia.id]: `https://sepolia.infura.io/v3/${INFURA_KEY}`,
    [holesky.id]: `https://holesky.infura.io/v3/${INFURA_KEY}`,

    // Layer 2 Networks
    // Arbitrum
    [arbitrum.id]: `https://arbitrum-mainnet.infura.io/v3/${INFURA_KEY}`,
    [arbitrumSepolia.id]: `https://arbitrum-sepolia.infura.io/v3/${INFURA_KEY}`,

    // Optimism
    [optimism.id]: `https://optimism-mainnet.infura.io/v3/${INFURA_KEY}`,
    [optimismSepolia.id]: `https://optimism-sepolia.infura.io/v3/${INFURA_KEY}`,

    // Base
    [base.id]: `https://base-mainnet.infura.io/v3/${INFURA_KEY}`,
    [baseSepolia.id]: `https://base-sepolia.infura.io/v3/${INFURA_KEY}`,

    // Linea
    [linea.id]: `https://linea-mainnet.infura.io/v3/${INFURA_KEY}`,
    [lineaSepolia.id]: `https://linea-sepolia.infura.io/v3/${INFURA_KEY}`,

    // ZKSync Era
    [zksync.id]: `https://zksync-mainnet.infura.io/v3/${INFURA_KEY}`,
    [zkLinkNovaSepoliaTestnet.id]: `https://zksync-sepolia.infura.io/v3/${INFURA_KEY}`,

    // Other EVM Networks
    // Avalanche
    [avalanche.id]: `https://avalanche-mainnet.infura.io/v3/${INFURA_KEY}`,
    [avalancheFuji.id]: `https://avalanche-fuji.infura.io/v3/${INFURA_KEY}`,

    // BSC
    [bsc.id]: `https://bsc-mainnet.infura.io/v3/${INFURA_KEY}`,
    [bscTestnet.id]: `https://bsc-testnet.infura.io/v3/${INFURA_KEY}`,

    // Polygon
    [polygon.id]: `https://polygon-mainnet.infura.io/v3/${INFURA_KEY}`,
    [polygonAmoy.id]: `https://polygon-amoy.infura.io/v3/${INFURA_KEY}`,

    // Celo
    [celo.id]: `https://celo-mainnet.infura.io/v3/${INFURA_KEY}`,
    [celoAlfajores.id]: `https://celo-alfajores.infura.io/v3/${INFURA_KEY}`,

    // Palm
    [palm.id]: `https://palm-mainnet.infura.io/v3/${INFURA_KEY}`,
    [palmTestnet.id]: `https://palm-testnet.infura.io/v3/${INFURA_KEY}`,

    // Additional Networks
    // Blast
    [blast.id]: `https://blast-mainnet.infura.io/v3/${INFURA_KEY}`,
    [blastSepolia.id]: `https://blast-sepolia.infura.io/v3/${INFURA_KEY}`,

    // Mantle
    [mantle.id]: `https://mantle-mainnet.infura.io/v3/${INFURA_KEY}`,
    [mantleSepoliaTestnet.id]: `https://mantle-sepolia.infura.io/v3/${INFURA_KEY}`,

    // opBNB
    [opBNB.id]: `https://opbnb-mainnet.infura.io/v3/${INFURA_KEY}`,
    [opBNBTestnet.id]: `https://opbnb-testnet.infura.io/v3/${INFURA_KEY}`,

    // Scroll
    [scroll.id]: `https://scroll-mainnet.infura.io/v3/${INFURA_KEY}`,
    [scrollSepolia.id]: `https://scroll-sepolia.infura.io/v3/${INFURA_KEY}`,


    // Unichain
    [unichainSepolia.id]: `https://unichain-sepolia.infura.io/v3/${INFURA_KEY}`
});

export const blastapiTransports = (BLAST_KEY) => ({
    // Ethereum and testnets
    [mainnet.id]: `https://eth-mainnet.blastapi.io/${BLAST_KEY}`,
    [sepolia.id]: `https://eth-sepolia.blastapi.io/${BLAST_KEY}`,
    [goerli.id]: `https://eth-goerli.blastapi.io/${BLAST_KEY}`,
    [holesky.id]: `https://eth-holesky.blastapi.io/${BLAST_KEY}`,

    // Layer 2s and Scaling Solutions
    // Arbitrum
    [arbitrum.id]: `https://arbitrum-one.blastapi.io/${BLAST_KEY}`,
    [arbitrumNova.id]: `https://arbitrum-nova.blastapi.io/${BLAST_KEY}`,
    [arbitrumGoerli.id]: `https://arbitrum-goerli.blastapi.io/${BLAST_KEY}`,
    [arbitrumSepolia.id]: `https://arbitrum-sepolia.blastapi.io/${BLAST_KEY}`,

    // Base
    [base.id]: `https://base-mainnet.blastapi.io/${BLAST_KEY}`,
    [baseGoerli.id]: `https://base-goerli.blastapi.io/${BLAST_KEY}`,

    // Linea
    [linea.id]: `https://linea-mainnet.blastapi.io/${BLAST_KEY}`,
    [lineaGoerli.id]: `https://linea-goerli.blastapi.io/${BLAST_KEY}`,

    // Scroll
    [scroll.id]: `https://scroll-mainnet.blastapi.io/${BLAST_KEY}`,
    [scrollSepolia.id]: `https://scroll-sepolia.blastapi.io/${BLAST_KEY}`,

    // zkSync
    [zksync.id]: `https://zksync-mainnet.blastapi.io/${BLAST_KEY}`,
    [zksyncSepoliaTestnet.id]: `https://zksync-sepolia.blastapi.io/${BLAST_KEY}`,

    // Other EVM Networks
    // BSC
    [bsc.id]: `https://bsc-mainnet.blastapi.io/${BLAST_KEY}`,
    [bscTestnet.id]: `https://bsc-testnet.blastapi.io/${BLAST_KEY}`,

    // Polygon
    [polygon.id]: `https://polygon-mainnet.blastapi.io/${BLAST_KEY}`,
    [polygonAmoy.id]: `https://polygon-amoy.blastapi.io/${BLAST_KEY}`,

    // Gnosis
    [gnosis.id]: `https://gnosis-mainnet.blastapi.io/${BLAST_KEY}`,

    // Fantom
    [fantom.id]: `https://fantom-mainnet.blastapi.io/${BLAST_KEY}`,
    [fantomTestnet.id]: `https://fantom-testnet.blastapi.io/${BLAST_KEY}`,

    // Blast L2
    [blast.id]: `https://blastl2-mainnet.blastapi.io/${BLAST_KEY}`,
    [blastSepolia.id]: `https://blastl2-sepolia.blastapi.io/${BLAST_KEY}`,

    // Mode
    [mode.id]: `https://mode-mainnet.blastapi.io/${BLAST_KEY}`,

    // ZetaChain
    [zetachain.id]: `https://zetachain-mainnet.blastapi.io/${BLAST_KEY}`,

});


function getTransportUrls(chainId, rpcConfig) {
    const { ankr, infura, blast } = rpcConfig;
    const urls = [];
    // Add additional transport URLs from different providers based on configuration
    if (ankr && ankrTransports(ankr)[chainId]) {
        urls.push(ankrTransports(ankr)[chainId]);
    }
    if (infura && infuraTransports(infura)[chainId]) {
        urls.push(infuraTransports(infura)[chainId]);
    }
    if (blast && blastapiTransports(blast)[chainId]) {
        urls.push(blastapiTransports(blast)[chainId]);
    }
    return [...new Set(urls)]; // Remove duplicates
}

export const useWagmiAdapter = ({
    rpc = 'ankr', // default RPC provider: 'ankr', 'infura', or 'blast'
    ankr = null, // ankrApiKey
    infura, // infuraApiKey
    blast, // blastApiKey
    activeChains = [],
}) => {
    // Create transports object for WagmiAdapter
    console.log(ankr, infura, blast);
    const transports = activeChains.reduce((acc, chainId) => {
        const transportUrls = getTransportUrls(chainId, { ankr, infura, blast });
        // Skip if the chain isn't supported by the selected provider
        if (!transportUrls.length) {
            console.warn(`Chain ID ${chainId} not supported by ${rpc} provider`);
            return acc;
        }
        const transports = transportUrls.map(url => http(url));
        return {
            ...acc,
            [chainId]: fallback(transports, {
                rank: true,
                retryCount: 2,
                timeout: 10000
            })
        };
    }, {});

    // Create and return the WagmiAdapter instance
    return new WagmiAdapter({
        networks: networks.filter(n => activeChains.includes(n?.id)),
        multiInjectedProviderDiscovery: true,
        autoConnect: true,
        transports,
    });
};


export function shortenAddress(address, chars = 4) {
    if (!address) return null;
    if (address?.length <= chars) return address;
    return `${address.substring(0, chars + 2)}...${address.substring(
        42 - chars,
    )}`;
}
// shorten the checksummed version of the input address to have 0x + 4 characters at start and end

export function truncateTx(fullStr = "", strLen = 33, separator = "...") {
    if (fullStr?.length <= strLen) return fullStr;
    const sepLen = separator.length;
    const charsToShow = strLen - sepLen;
    const frontChars = Math.ceil(charsToShow / 2);
    const backChars = Math.floor(charsToShow / 2);
    return (
        fullStr.substring(0, frontChars + 3) +
        separator +
        fullStr.substring(fullStr.length - backChars - 3)
    );
}


================================================
File: resources/views/app.blade.php
================================================
<!DOCTYPE html>
<html class="dark" dark lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <link rel="shortcut icon" href="/favicon.ico" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="manifest" href="/site.webmanifest" />
        
        <title inertia>{{ config('app.name', 'Laravel') }}</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

        <!-- Scripts -->
        @routes
        @if(request()->is('install*'))
            @vite(['resources/js/install.js', "resources/js/Pages/{$page['component']}.vue"])
        @else
             @vite(['resources/js/app.js', "resources/js/Pages/{$page['component']}.vue"])
        @endif
        @inertiaHead
        <script src="https://s3.tradingview.com/tv.js"></script>
        
    </head>
    <body class="font-sans antialiased">
        @inertia
    </body>
</html>


================================================
File: resources/views/errors/403.blade.php
================================================
@extends('errors.layout')

@section('code', '403')
@section('title', 'Forbidden')
@section('message', 'Sorry, you don\'t have permission to access this page.')

================================================
File: resources/views/errors/404.blade.php
================================================
@extends('errors.layout')

@section('code', '404')
@section('title', 'Page Not Found')
@section('message', 'Sorry, we couldn\'t find the page you\'re looking for.')

================================================
File: resources/views/errors/419.blade.php
================================================
@extends('errors.layout')

@section('code', '419')
@section('title', 'Page Expired')
@section('message', 'Sorry, your session has expired. Please refresh and try again.')

================================================
File: resources/views/errors/429.blade.php
================================================
@extends('errors.layout')

@section('code', '429')
@section('title', 'Too Many Requests')
@section('message', 'Sorry, you are making too many requests to our servers.')

================================================
File: resources/views/errors/500.blade.php
================================================
@extends('errors.layout')

@section('code', '500')
@section('title', 'Server Error')
@section('message', 'Sorry, something went wrong on our servers.')

================================================
File: resources/views/errors/503.blade.php
================================================
@extends('errors.layout')

@section('code', '503')
@section('title', 'Service Unavailable')
@section('message', 'Sorry, we're doing some maintenance. Please check back soon.')

================================================
File: resources/views/errors/layout.blade.php
================================================
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" class="h-full dark">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{{ $title ?? 'Error' }} | {{ config('app.name') }}</title>
    @vite(['resources/css/app.css'])
</head>
<body class="h-full">
    <div class="min-h-screen bg-gray-50 dark:bg-gray-900 px-4 py-16 sm:px-6 sm:py-24 md:grid md:place-items-center lg:px-8">
        <div class="max-w-max mx-auto">
            <section class="bg-white dark:bg-gray-900 ">
                <div class="container flex items-center mx-auto">
                    <div>
                        <p class="text-6xl font-medium text-red-500 dark:text-red-400"> @yield('code')</p>
                        <h1 class="mt-3 text-2xl font-semibold text-gray-800 dark:text-white md:text-3xl">@yield('title')</h1>
                        <p class="mt-4 text-gray-500 dark:text-gray-400">@yield('message').</p>

                        <div class="flex items-center mt-6 gap-x-3">
                            <button onclick="window.history.back()"  class="flex items-center justify-center w-1/2 px-5 py-2 text-sm text-gray-700 transition-colors duration-200 bg-white border rounded gap-x-2 sm:w-auto dark:hover:bg-gray-800 dark:bg-gray-900 hover:bg-gray-100 dark:text-gray-200 dark:border-gray-700">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 rtl:rotate-180">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 15.75L3 12m0 0l3.75-3.75M3 12h18" />
                                </svg>

                                <span>Go back</span>
                            </button>

                            <a href="{{ url('/') }}" class="w-1/2 px-5 py-2 text-sm tracking-wide text-white transition-colors duration-200 bg-amber-500 rounded shrink-0 sm:w-auto hover:bg-amber-600 dark:hover:bg-amber-500 dark:bg-amber-600">
                                Take me home
                            </a>
                        </div>
                    </div>
                </div>
            </section>
            
        </div>
    </div>

    <script>
        // Check for dark mode preference
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
    </script>
</body>
</html>

================================================
File: routes/admin.php
================================================
<?php

use App\Http\Controllers\Admin\DashboardController;
use App\Http\Controllers\Admin\FactoriesController;
use App\Http\Controllers\Admin\HoldersController;
use App\Http\Controllers\Admin\LaunchpadsController;
use App\Http\Controllers\Admin\MsgsController;
use App\Http\Controllers\Admin\PromosController;
use App\Http\Controllers\Admin\SettingsController;
